From 70d4c3964decff689d3a33f919cc4482bf4dc7a3 Mon Sep 17 00:00:00 2001
From: Victor Khimenko <khim@chromium.org>
Date: Tue, 27 Jul 2010 22:16:18 +0200
Subject: [PATCH 32/32] [newlib] fix read sandboxing in asm functions

Review URL: http://codereview.chromium.org/3033029
---
 newlib/newlib/libc/machine/x86_64/memcpy.S |   55 ++++++++++++++--------------
 newlib/newlib/libc/machine/x86_64/memset.S |    2 -
 newlib/newlib/libc/machine/x86_64/setjmp.S |   17 ++++-----
 3 files changed, 35 insertions(+), 39 deletions(-)

diff --git a/newlib/newlib/libc/machine/x86_64/memcpy.S b/newlib/newlib/libc/machine/x86_64/memcpy.S
index 3db10ee..2465cc9 100644
--- a/newlib/newlib/libc/machine/x86_64/memcpy.S
+++ b/newlib/newlib/libc/machine/x86_64/memcpy.S
@@ -15,8 +15,6 @@
 
 SYM (memcpy):
   movl    edi, eax                /* Store destination in return value */
-  movl    esi, esi                /* Only need to do read sandboxing once */
-  addq    r15, rsi
   cmpl    $16, edx
   jb      byte_copy
 
@@ -26,10 +24,11 @@ SYM (memcpy):
   movl    $8, ecx
   subl    r8d, ecx
   subl    ecx, edx
-  
-  rep     movsb (rsi), %nacl:(rdi), r15
+
+  rep     movsb %nacl:(rsi), %nacl:(rdi), r15
 
 quadword_aligned:
+  movl    esi, esi                /* We must clear top half for prefetch */
   cmpl    $256, edx
   jb      quadword_copy
 
@@ -43,17 +42,17 @@ quadword_aligned:
 
   .p2align 4
 loop:
-  prefetchnta   768 (rsi)
-  prefetchnta   832 (rsi)
-
-  movq       (rsi), rax
-  movq     8 (rsi), r8
-  movq    16 (rsi), r9
-  movq    24 (rsi), r10
-  movq    32 (rsi), r11
-  movq    40 (rsi), r12
-  movq    48 (rsi), r13
-  movq    56 (rsi), r14
+  prefetchnta   768 (r15,rsi)
+  prefetchnta   832 (r15,rsi)
+
+  movq %nacl:      (r15,rsi), rax
+  movq %nacl:    8 (r15,rsi), r8
+  movq %nacl:   16 (r15,rsi), r9
+  movq %nacl:   24 (r15,rsi), r10
+  movq %nacl:   32 (r15,rsi), r11
+  movq %nacl:   40 (r15,rsi), r12
+  movq %nacl:   48 (r15,rsi), r13
+  movq %nacl:   56 (r15,rsi), r14
 
   movntiq rax, %nacl:     (r15,rdi)
   movntiq r8 , %nacl:   8 (r15,rdi)
@@ -64,14 +63,14 @@ loop:
   movntiq r13, %nacl:  48 (r15,rdi)
   movntiq r14, %nacl:  56 (r15,rdi)
 
-  movq     64 (rsi), rax
-  movq     72 (rsi), r8
-  movq     80 (rsi), r9
-  movq     88 (rsi), r10
-  movq     96 (rsi), r11
-  movq    104 (rsi), r12
-  movq    112 (rsi), r13
-  movq    120 (rsi), r14
+  movq %nacl:    64 (r15,rsi), rax
+  movq %nacl:    72 (r15,rsi), r8
+  movq %nacl:    80 (r15,rsi), r9
+  movq %nacl:    88 (r15,rsi), r10
+  movq %nacl:    96 (r15,rsi), r11
+  movq %nacl:   104 (r15,rsi), r12
+  movq %nacl:   112 (r15,rsi), r13
+  movq %nacl:   120 (r15,rsi), r14
 
   movntiq rax, %nacl:  64 (r15,rdi)
   movntiq r8 , %nacl:  72 (r15,rdi)
@@ -82,7 +81,7 @@ loop:
   movntiq r13, %nacl: 112 (r15,rdi)
   movntiq r14, %nacl: 120 (r15,rdi)
 
-  leaq    128 (rsi), rsi
+  leal    128 (rsi), esi
   leal    128 (rdi), edi
 
   dec     ecx
@@ -91,7 +90,7 @@ loop:
   sfence
   movl    edx, ecx
   andl    $127, ecx
-  rep     movsb (rsi), %nacl:(rdi), r15
+  rep     movsb %nacl:(rsi), %nacl:(rdi), r15
   popq    r14
   popq    r13
   popq    r12
@@ -102,7 +101,7 @@ loop:
 
 byte_copy:
   movl    edx, ecx
-  rep     movsb (rsi), %nacl:(rdi), r15
+  rep     movsb %nacl:(rsi), %nacl:(rdi), r15
   pop     r11
   nacljmp r11d, r15
 
@@ -111,9 +110,9 @@ quadword_copy:
   movl    edx, ecx
   shrl    $3, ecx
   .p2align 4
-  rep     movsq (rsi), %nacl:(rdi), r15
+  rep     movsq %nacl:(rsi), %nacl:(rdi), r15
   movl    edx, ecx
   andl    $7, ecx
-  rep     movsb (rsi), %nacl:(rdi), r15 /* Copy the remaining bytes */
+  rep     movsb %nacl:(rsi), %nacl:(rdi), r15 /* Copy the remaining bytes */
   pop     r11
   nacljmp r11d, r15
diff --git a/newlib/newlib/libc/machine/x86_64/memset.S b/newlib/newlib/libc/machine/x86_64/memset.S
index 2243180..c16cd58 100644
--- a/newlib/newlib/libc/machine/x86_64/memset.S
+++ b/newlib/newlib/libc/machine/x86_64/memset.S
@@ -14,8 +14,6 @@
   SOTYPE_FUNCTION(memset)
 
 SYM (memset):
-  movl    esi, esi                /* Only need to do read sandboxing once */
-  addq    r15 ,rsi
   movl    edi, r9d                /* Save return value */
   movl    esi, eax
   movl    edx, ecx
diff --git a/newlib/newlib/libc/machine/x86_64/setjmp.S b/newlib/newlib/libc/machine/x86_64/setjmp.S
index 81f6da8..747cbbb 100644
--- a/newlib/newlib/libc/machine/x86_64/setjmp.S
+++ b/newlib/newlib/libc/machine/x86_64/setjmp.S
@@ -36,18 +36,17 @@ SYM (setjmp):
   nacljmp r11d, r15
 
 SYM (longjmp):
-  movl    edi, edi        /* Sandbox */
   movq    rsi, rax        /* Return value */
 
-  naclrestbp 40 (r15,rdi), r15
+  naclrestbp %nacl: 40 (r15,rdi), r15
 
   __CLI
-  naclrestsp 44 (r15,rdi), r15
-  pushq   32 (r15,rdi)
-  movq     0 (r15,rdi), rbx
-  movq     8 (r15,rdi), r12
-  movq    16 (r15,rdi), r13
-  movq    24 (r15,rdi), r14
+  naclrestsp %nacl: 44 (r15,rdi), r15
+  pushq %nacl:  32 (r15,rdi)
+  movq %nacl:    0 (r15,rdi), rbx
+  movq %nacl:    8 (r15,rdi), r12
+  movq %nacl:   16 (r15,rdi), r13
+  movq %nacl:   24 (r15,rdi), r14
   __STI
 
   pop     r11
-- 
1.7.1


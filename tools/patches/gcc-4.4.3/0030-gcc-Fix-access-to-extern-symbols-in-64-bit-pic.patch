From a967f54f3a29dc981b418842e5a25a029a89df1d Mon Sep 17 00:00:00 2001
From: Evgeny Eltsin <eaeltsin@google.com>
Date: Wed, 21 Jul 2010 22:30:14 +0400
Subject: [PATCH 30/38] [gcc] Fix access to extern symbols in 64-bit pic.

Test that should compile:
  extern int var[2];
  int* foo() {
    return &var[2];
  }

The fix is to have the legitimized pic address in Pmode.

Review URL: http://codereview.chromium.org/3059003
---
 gcc/gcc/config/i386/i386.c |   58 +++++++++++++++++++++----------------------
 1 files changed, 28 insertions(+), 30 deletions(-)

diff --git a/gcc/gcc/config/i386/i386.c b/gcc/gcc/config/i386/i386.c
index c9746d4..4f1c5e1 100644
--- a/gcc/gcc/config/i386/i386.c
+++ b/gcc/gcc/config/i386/i386.c
@@ -9890,9 +9890,7 @@ legitimize_pic_address (rtx orig, rtx reg)
   rtx addr = orig;
   rtx new_rtx = orig;
   rtx base;
-  enum machine_mode orig_mode;
 
-  orig_mode = GET_MODE (orig);
 #if TARGET_MACHO
   if (TARGET_MACHO && !TARGET_64BIT)
     {
@@ -9940,7 +9938,7 @@ legitimize_pic_address (rtx orig, rtx reg)
 	}
       else new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmpreg);
     }
-  else if (!TARGET_64BIT && gotoff_operand (addr, orig_mode))
+  else if (!TARGET_64BIT && gotoff_operand (addr, Pmode))
     {
       /* This symbol may be referenced via a displacement from the PIC
 	 base address (@GOTOFF).  */
@@ -9951,14 +9949,14 @@ legitimize_pic_address (rtx orig, rtx reg)
 	addr = XEXP (addr, 0);
       if (GET_CODE (addr) == PLUS)
 	  {
-            new_rtx = gen_rtx_UNSPEC (orig_mode, gen_rtvec (1, XEXP (addr, 0)),
+            new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)),
 				      UNSPEC_GOTOFF);
-	    new_rtx = gen_rtx_PLUS (orig_mode, new_rtx, XEXP (addr, 1));
+	    new_rtx = gen_rtx_PLUS (Pmode, new_rtx, XEXP (addr, 1));
 	  }
 	else
-          new_rtx = gen_rtx_UNSPEC (orig_mode, gen_rtvec (1, addr), UNSPEC_GOTOFF);
-      new_rtx = gen_rtx_CONST (orig_mode, new_rtx);
-      new_rtx = gen_rtx_PLUS (orig_mode, pic_offset_table_rtx, new_rtx);
+          new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);
+      new_rtx = gen_rtx_CONST (Pmode, new_rtx);
+      new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);
 
       if (reg != 0)
 	{
@@ -9980,19 +9978,19 @@ legitimize_pic_address (rtx orig, rtx reg)
               && SYMBOL_REF_DLLIMPORT_P (XEXP (XEXP (addr, 0), 0)))
             {
               rtx t = legitimize_dllimport_symbol (XEXP (XEXP (addr, 0), 0), true);
-              return gen_rtx_PLUS (orig_mode, t, XEXP (XEXP (addr, 0), 1));
+              return gen_rtx_PLUS (Pmode, t, XEXP (XEXP (addr, 0), 1));
             }
         }
 
       if (TARGET_64BIT && ix86_cmodel != CM_LARGE_PIC)
 	{
-	  new_rtx = gen_rtx_UNSPEC (orig_mode, gen_rtvec (1, addr), UNSPEC_GOTPCREL);
-	  new_rtx = gen_rtx_CONST (orig_mode, new_rtx);
-	  new_rtx = gen_const_mem (orig_mode, new_rtx);
+	  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTPCREL);
+	  new_rtx = gen_rtx_CONST (Pmode, new_rtx);
+	  new_rtx = gen_const_mem (Pmode, new_rtx);
 	  set_mem_alias_set (new_rtx, ix86_GOT_alias_set ());
 
 	  if (reg == 0)
-	    reg = gen_reg_rtx (orig_mode);
+	    reg = gen_reg_rtx (Pmode);
 	  /* Use directly gen_movsi, otherwise the address is loaded
 	     into register for CSE.  We don't want to CSE this addresses,
 	     instead we CSE addresses from the GOT table, so skip this.  */
@@ -10006,16 +10004,16 @@ legitimize_pic_address (rtx orig, rtx reg)
 
 	  if (reload_in_progress)
 	    df_set_regs_ever_live (PIC_OFFSET_TABLE_REGNUM, true);
-	  new_rtx = gen_rtx_UNSPEC (orig_mode, gen_rtvec (1, addr), UNSPEC_GOT);
-	  new_rtx = gen_rtx_CONST (orig_mode, new_rtx);
+	  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);
+	  new_rtx = gen_rtx_CONST (Pmode, new_rtx);
 	  if (TARGET_64BIT)
-	    new_rtx = force_reg (orig_mode, new_rtx);
-	  new_rtx = gen_rtx_PLUS (orig_mode, pic_offset_table_rtx, new_rtx);
-	  new_rtx = gen_const_mem (orig_mode, new_rtx);
+	    new_rtx = force_reg (Pmode, new_rtx);
+	  new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);
+	  new_rtx = gen_const_mem (Pmode, new_rtx);
 	  set_mem_alias_set (new_rtx, ix86_GOT_alias_set ());
 
 	  if (reg == 0)
-	    reg = gen_reg_rtx (orig_mode);
+	    reg = gen_reg_rtx (Pmode);
 	  emit_move_insn (reg, new_rtx);
 	  new_rtx = reg;
 	}
@@ -10031,7 +10029,7 @@ legitimize_pic_address (rtx orig, rtx reg)
 	      new_rtx = reg;
 	    }
 	  else
-	    new_rtx = force_reg (orig_mode, addr);
+	    new_rtx = force_reg (Pmode, addr);
 	}
       else if (GET_CODE (addr) == CONST)
 	{
@@ -10052,18 +10050,18 @@ legitimize_pic_address (rtx orig, rtx reg)
 
 	  /* Check first to see if this is a constant offset from a @GOTOFF
 	     symbol reference.  */
-	  if (gotoff_operand (op0, orig_mode)
+	  if (gotoff_operand (op0, Pmode)
 	      && CONST_INT_P (op1))
 	    {
 	      if (!TARGET_64BIT)
 		{
 		  if (reload_in_progress)
 		    df_set_regs_ever_live (PIC_OFFSET_TABLE_REGNUM, true);
-		  new_rtx = gen_rtx_UNSPEC (orig_mode, gen_rtvec (1, op0),
+		  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op0),
 					    UNSPEC_GOTOFF);
-		  new_rtx = gen_rtx_PLUS (orig_mode, new_rtx, op1);
-		  new_rtx = gen_rtx_CONST (orig_mode, new_rtx);
-		  new_rtx = gen_rtx_PLUS (orig_mode, pic_offset_table_rtx, new_rtx);
+		  new_rtx = gen_rtx_PLUS (Pmode, new_rtx, op1);
+		  new_rtx = gen_rtx_CONST (Pmode, new_rtx);
+		  new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);
 
 		  if (reg != 0)
 		    {
@@ -10076,9 +10074,9 @@ legitimize_pic_address (rtx orig, rtx reg)
 		  if (INTVAL (op1) < -16*1024*1024
 		      || INTVAL (op1) >= 16*1024*1024)
 		    {
-		      if (!x86_64_immediate_operand (op1, orig_mode))
-			op1 = force_reg (orig_mode, op1);
-		      new_rtx = gen_rtx_PLUS (orig_mode, force_reg (orig_mode, op0), op1);
+		      if (!x86_64_immediate_operand (op1, Pmode))
+			op1 = force_reg (Pmode, op1);
+		      new_rtx = gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), op1);
 		    }
 		}
 	    }
@@ -10094,10 +10092,10 @@ legitimize_pic_address (rtx orig, rtx reg)
 		{
 		  if (GET_CODE (new_rtx) == PLUS && CONSTANT_P (XEXP (new_rtx, 1)))
 		    {
-		      base = gen_rtx_PLUS (orig_mode, base, XEXP (new_rtx, 0));
+		      base = gen_rtx_PLUS (Pmode, base, XEXP (new_rtx, 0));
 		      new_rtx = XEXP (new_rtx, 1);
 		    }
-		  new_rtx = gen_rtx_PLUS (orig_mode, base, new_rtx);
+		  new_rtx = gen_rtx_PLUS (Pmode, base, new_rtx);
 		}
 	    }
 	}
-- 
1.7.1


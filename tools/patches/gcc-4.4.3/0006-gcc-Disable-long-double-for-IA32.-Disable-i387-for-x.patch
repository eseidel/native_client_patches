From de2609f3131be0d673ccfcfe6f6fb6210d1f6616 Mon Sep 17 00:00:00 2001
From: Egor Pasko <pasko@google.com>
Date: Tue, 18 May 2010 15:31:40 +0200
Subject: [PATCH 06/12] [gcc] Disable long double for IA32. Disable i387 for x86-64.

Rationale: PNaCl can not offer 'long double' since this mode is only supported
by x86 architecture. To make further transition easier we'l disable long double
in default NaCl compiler. Unfortunatelly we can not disable i387 mode for IA32
because SSE is not enough to implement double precision floating point
operations and SSE2 is not implemented in Pentium !!! and Athlon XP (still
widely used in some regions). i387 mode can only ever use 80bit floats
internally - so while we are removing 80bit 'long double' type we are keeping
80bit internal XFmode around.

Also we are disabling SSE math for IA32 - this is not a good default mode for
general code: because SSE only supports single-precision float operations,
double-precision doubles can only be operated with i387 code and switch between
i387 and SSE subsystems is slow on a lot of CPUs. The SSE-base code still can be
used for carefully written codecs and benchmarks, but it's not a default
anymore, it must be enabled explicitly.
---
 gcc/gcc/config/i386/i386.c |    2 +-
 gcc/gcc/config/i386/i386.h |   17 ++++++++++++++++-
 gcc/gcc/config/i386/nacl.h |   13 +++++++++++++
 gcc/gcc/machmode.h         |    4 ++++
 4 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/gcc/gcc/config/i386/i386.c b/gcc/gcc/config/i386/i386.c
index 177ecf2..d23b4ba 100644
--- a/gcc/gcc/config/i386/i386.c
+++ b/gcc/gcc/config/i386/i386.c
@@ -2705,7 +2705,7 @@ override_options (bool main_args_p)
 	     prefix, suffix, prefix, suffix, prefix, suffix);
 
   if (!ix86_arch_string)
-    ix86_arch_string = TARGET_64BIT ? "x86-64" : "i386";
+    ix86_arch_string = TARGET_64BIT ? "x86-64" : "i686";
   else
     ix86_arch_specified = 1;
 
diff --git a/gcc/gcc/config/i386/i386.h b/gcc/gcc/config/i386/i386.h
index 23c0d18..e6cdf1f 100644
--- a/gcc/gcc/config/i386/i386.h
+++ b/gcc/gcc/config/i386/i386.h
@@ -621,7 +621,22 @@ enum target_cpu_default
 #define LONG_TYPE_SIZE BITS_PER_WORD
 #define DOUBLE_TYPE_SIZE 64
 #define LONG_LONG_TYPE_SIZE 64
-#define LONG_DOUBLE_TYPE_SIZE 80
+#define LONG_DOUBLE_TYPE_SIZE (TARGET_80387 ? 80 : 64)
+
+/* With SSE2 but no 80387 we can not use 80bit long double but with 80387 we
+   must use 80bit long double in registers - hardware limitation in both cases */
+
+#undef GET_MODE_WIDER_MODE
+#define GET_MODE_WIDER_MODE(MODE) \
+	(TARGET_80387 ? mode_wider[MODE] : \
+	 ((MODE) != DFmode && (MODE) != XFmode && (MODE) != V4DFmode && \
+	  (MODE) != DCmode && (MODE) != XCmode) ? mode_wider[MODE] : \
+						  VOIDmode)
+#undef GET_MODE_2XWIDER_MODE
+#define GET_MODE_2XWIDER_MODE(MODE) \
+	(TARGET_80387 ? mode_2xwider[MODE] : \
+	 ((MODE) != DFmode && (MODE) != XFmode) ? mode_2xwider[MODE] : \
+						  VOIDmode)
 
 #define WIDEST_HARDWARE_FP_SIZE LONG_DOUBLE_TYPE_SIZE
 
diff --git a/gcc/gcc/config/i386/nacl.h b/gcc/gcc/config/i386/nacl.h
index 6ab127f..ec75ec6 100644
--- a/gcc/gcc/config/i386/nacl.h
+++ b/gcc/gcc/config/i386/nacl.h
@@ -84,6 +84,19 @@ Boston, MA 02111-1307, USA.  */
 #define LONG_TYPE_SIZE 32
 #define POINTER_SIZE 32
 #define POINTERS_EXTEND_UNSIGNED 1
+#undef LONG_DOUBLE_TYPE_SIZE
+#define LONG_DOUBLE_TYPE_SIZE 64
+
+#undef TARGET_SUBTARGET_DEFAULT
+#define TARGET_SUBTARGET_DEFAULT	(MASK_IEEE_FP)
+
+#undef TARGET_SUBTARGET32_DEFAULT
+#define TARGET_SUBTARGET32_DEFAULT \
+	(MASK_80387 | MASK_FLOAT_RETURNS)
+
+#undef TARGET_SUBTARGET64_DEFAULT
+#define TARGET_SUBTARGET64_DEFAULT 0
+
 /* NaCl reserves R15 and makes RBP special in x86-64 mode */
 #undef FIXED_REGISTERS
 #define FIXED_REGISTERS						\
diff --git a/gcc/gcc/machmode.h b/gcc/gcc/machmode.h
index 7d50b46..c9022e7 100644
--- a/gcc/gcc/machmode.h
+++ b/gcc/gcc/machmode.h
@@ -219,10 +219,14 @@ extern const unsigned char mode_nunits[NUM_MACHINE_MODES];
 /* Get the next wider natural mode (eg, QI -> HI -> SI -> DI -> TI).  */
 
 extern const unsigned char mode_wider[NUM_MACHINE_MODES];
+#ifndef GET_MODE_WIDER_MODE
 #define GET_MODE_WIDER_MODE(MODE) mode_wider[MODE]
+#endif
 
 extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];
+#ifndef GET_MODE_2XWIDER_MODE
 #define GET_MODE_2XWIDER_MODE(MODE) mode_2xwider[MODE]
+#endif
 
 /* Return the mode for data of a given size SIZE and mode class CLASS.
    If LIMIT is nonzero, then don't use modes bigger than MAX_FIXED_MODE_SIZE.
-- 
1.7.0.1


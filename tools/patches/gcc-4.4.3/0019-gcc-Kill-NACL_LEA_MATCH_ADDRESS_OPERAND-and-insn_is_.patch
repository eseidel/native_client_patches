From d3fe0b26510844bcbd97d7b3ef422d563129899b Mon Sep 17 00:00:00 2001
From: Evgeny Eltsin <eaeltsin@google.com>
Date: Fri, 25 Jun 2010 15:52:30 +0400
Subject: [PATCH 19/21] [gcc] Kill NACL_LEA_MATCH_ADDRESS_OPERAND and insn_is_nacl_lea.

This is a cleanup change - removing stuff made no-op by new contsraint for LEA memory operand.

Review URL: http://codereview.chromium.org/2866019
---
 gcc/gcc/caller-save.c             |    8 ------
 gcc/gcc/config/i386/i386-protos.h |    2 -
 gcc/gcc/config/i386/i386.c        |   46 -------------------------------------
 gcc/gcc/final.c                   |    8 ------
 gcc/gcc/genattrtab.c              |    3 --
 gcc/gcc/ira.c                     |   10 +-------
 gcc/gcc/postreload.c              |    6 +----
 gcc/gcc/recog.c                   |   39 ++-----------------------------
 gcc/gcc/regrename.c               |   10 --------
 gcc/gcc/reload.c                  |    4 ---
 gcc/gcc/reload1.c                 |   34 +-------------------------
 gcc/gcc/sel-sched.c               |    4 ---
 12 files changed, 7 insertions(+), 167 deletions(-)

diff --git a/gcc/gcc/caller-save.c b/gcc/gcc/caller-save.c
index 5bd0611..0c840c3 100644
--- a/gcc/gcc/caller-save.c
+++ b/gcc/gcc/caller-save.c
@@ -161,17 +161,9 @@ reg_save_code (int reg, enum machine_mode mode)
   if (ok)
     {
       extract_insn (saveinsn);
-      if (insn_is_nacl_lea(saveinsn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND++;
       ok = constrain_operands (1);
-      if (insn_is_nacl_lea(saveinsn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND--;
       extract_insn (restinsn);
-      if (insn_is_nacl_lea(restinsn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND++;
       ok &= constrain_operands (1);
-      if (insn_is_nacl_lea(restinsn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND--;
     }
 
   if (! ok)
diff --git a/gcc/gcc/config/i386/i386-protos.h b/gcc/gcc/config/i386/i386-protos.h
index c37ef50..3cd5368 100644
--- a/gcc/gcc/config/i386/i386-protos.h
+++ b/gcc/gcc/config/i386/i386-protos.h
@@ -261,8 +261,6 @@ struct ix86_address
   enum ix86_address_seg seg;
 };
 
-extern int NACL_LEA_MATCH_ADDRESS_OPERAND;
-extern int insn_is_nacl_lea(rtx insn);
 extern int lea_match_address_operand (rtx, enum machine_mode);
 extern int ix86_decompose_address (rtx, struct ix86_address *);
 extern int memory_address_length (rtx addr);
diff --git a/gcc/gcc/config/i386/i386.c b/gcc/gcc/config/i386/i386.c
index 1d91ca0..d72ba33 100644
--- a/gcc/gcc/config/i386/i386.c
+++ b/gcc/gcc/config/i386/i386.c
@@ -8960,7 +8960,6 @@ ix86_lea_decompose_address (rtx addr, struct ix86_address *out)
   return retval;
 }
 
-int NACL_LEA_MATCH_ADDRESS_OPERAND = 0;
 int
 lea_match_address_operand (rtx op, enum machine_mode mode)
 {
@@ -8980,51 +8979,6 @@ lea_match_address_operand (rtx op, enum machine_mode mode)
 #endif
 }
 
-/* Check if instruction is a LEA instruction.
-
-   We should prevent invocation of get_attr_type(insn) for some insns. Examples
-   are: USE, CLOBBER, instructions with asm_operands. get_attr_type() has a side
-   effect on the instruction itself or on recog_data.
-
-   This pattern of checking was borrowed from extract_insn() in recog.c and
-   should be refactored to improve code reuse.  */
-
-int
-insn_is_nacl_lea(rtx insn)
-{
-  rtx body = PATTERN(insn);
-
-  if (!TARGET_64BIT)
-    return 0;
-
-  switch (GET_CODE (body))
-    {
-    case USE:
-    case CLOBBER:
-    case ASM_INPUT:
-    case ADDR_VEC:
-    case ADDR_DIFF_VEC:
-    case ASM_OPERANDS:
-      return 0;
-
-    case SET:
-      if (GET_CODE (SET_SRC (body)) == ASM_OPERANDS)
-	return 0;
-      else
-	goto normal_insn;
-    case PARALLEL:
-      if ((GET_CODE (XVECEXP (body, 0, 0)) == SET
-	   && GET_CODE (SET_SRC (XVECEXP (body, 0, 0))) == ASM_OPERANDS)
-	  || GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS)
-	return 0;
-      else
-	goto normal_insn;
-    default:
-    normal_insn:
-      return get_attr_type (insn) == TYPE_LEA;
-    }
-}
-
 static int
 gen_r15(rtx reg)
 {
diff --git a/gcc/gcc/final.c b/gcc/gcc/final.c
index 55592e2..2afa475 100644
--- a/gcc/gcc/final.c
+++ b/gcc/gcc/final.c
@@ -2534,12 +2534,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,
 	    print_rtx_head = "";
 	  }
 
-	if (insn_is_nacl_lea(insn))
-	  NACL_LEA_MATCH_ADDRESS_OPERAND++;
 	if (! constrain_operands_cached (1))
 	  fatal_insn_not_found (insn);
-	if (insn_is_nacl_lea(insn))
-	 NACL_LEA_MATCH_ADDRESS_OPERAND--;
 
 	/* Some target machines need to prescan each insn before
 	   it is output.  */
@@ -2640,11 +2636,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,
 	  }
 
 	/* Output assembler code from the template.  */
-        if (insn_is_nacl_lea(insn))
-          NACL_LEA_MATCH_ADDRESS_OPERAND++;
 	output_asm_insn (templ, recog_data.operand);
-	if (insn_is_nacl_lea(insn))
-          NACL_LEA_MATCH_ADDRESS_OPERAND--;
 
 	/* If necessary, report the effect that the instruction has on
 	   the unwind info.   We've already done this for delay slots
diff --git a/gcc/gcc/genattrtab.c b/gcc/gcc/genattrtab.c
index 55abd95..794a8db 100644
--- a/gcc/gcc/genattrtab.c
+++ b/gcc/gcc/genattrtab.c
@@ -3650,11 +3650,8 @@ write_attr_get (struct attr_desc *attr)
   if (attr->name[0] == '*')
     printf ("%s (rtx insn ATTRIBUTE_UNUSED)\n", &attr->name[1]);
   else if (attr->is_const == 0)
-    if (strcmp(attr->name, "type"))
     printf ("get_attr_%s (rtx insn ATTRIBUTE_UNUSED)\n", attr->name);
   else
-      printf ("get_attr_type_real (rtx insn ATTRIBUTE_UNUSED)\n");
-  else
     {
       printf ("get_attr_%s (void)\n", attr->name);
       printf ("{\n");
diff --git a/gcc/gcc/ira.c b/gcc/gcc/ira.c
index 7295bf9..a95c835 100644
--- a/gcc/gcc/ira.c
+++ b/gcc/gcc/ira.c
@@ -1317,16 +1317,8 @@ setup_prohibited_mode_move_regs (void)
 	  if (INSN_CODE (move_insn) < 0)
 	    continue;
 	  extract_insn (move_insn);
-	  if (insn_is_nacl_lea(move_insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND++;
 	  if (! constrain_operands (1))
-	    {
-	      if (insn_is_nacl_lea(move_insn))
-		NACL_LEA_MATCH_ADDRESS_OPERAND--;
-	      continue;
-	    }
-	  if (insn_is_nacl_lea(move_insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND--;
+	    continue;
 	  CLEAR_HARD_REG_BIT (ira_prohibited_mode_move_regs[i], j);
 	}
     }
diff --git a/gcc/gcc/postreload.c b/gcc/gcc/postreload.c
index 782531d..8abc90f 100644
--- a/gcc/gcc/postreload.c
+++ b/gcc/gcc/postreload.c
@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see
 #include "tm_p.h"
 #include "obstack.h"
 #include "insn-config.h"
-#include "insn-attr.h"
 #include "flags.h"
 #include "function.h"
 #include "expr.h"
@@ -393,12 +392,8 @@ reload_cse_simplify_operands (rtx insn, rtx testreg)
     return 0;
 
   /* Figure out which alternative currently matches.  */
-  if (insn_is_nacl_lea(insn))
-    NACL_LEA_MATCH_ADDRESS_OPERAND++;
   if (! constrain_operands (1))
     fatal_insn_not_found (insn);
-  if (insn_is_nacl_lea(insn))
-    NACL_LEA_MATCH_ADDRESS_OPERAND--;
 
   alternative_reject = XALLOCAVEC (int, recog_data.n_alternatives);
   alternative_nregs = XALLOCAVEC (int, recog_data.n_alternatives);
@@ -1615,3 +1610,4 @@ struct rtl_opt_pass pass_postreload_cse =
   TODO_dump_func                        /* todo_flags_finish */
  }
 };
+
diff --git a/gcc/gcc/recog.c b/gcc/gcc/recog.c
index a49a8ae..70370e3 100644
--- a/gcc/gcc/recog.c
+++ b/gcc/gcc/recog.c
@@ -332,17 +332,8 @@ insn_invalid_p (rtx insn)
     {
       extract_insn (insn);
 
-      /* Make sure we allow as much as possble here.  We don't need to check
-         the sandboxing here, only validity of the instruction.  */
-      NACL_LEA_MATCH_ADDRESS_OPERAND++;
-
       if (! constrain_operands (1))
-	{
-	  NACL_LEA_MATCH_ADDRESS_OPERAND--;
-	  return 1;
-	}
-
-      NACL_LEA_MATCH_ADDRESS_OPERAND--;
+	return 1;
     }
 
   INSN_CODE (insn) = icode;
@@ -1970,25 +1961,10 @@ extract_insn_cached (rtx insn)
 void
 extract_constrain_insn_cached (rtx insn)
 {
-  int lea, change_lea;
-  /* get_attr_type can call extract_constrain_insn_cached - don't call it if in
-     lea mode already */
-  if (!TARGET_64BIT || NACL_LEA_MATCH_ADDRESS_OPERAND)
-    {
-       lea = 1;
-       change_lea = 0;
-    }
-  else
-    {
-      lea = insn_is_nacl_lea(insn);
-      change_lea = 1;
-    }
-  if (lea && change_lea) NACL_LEA_MATCH_ADDRESS_OPERAND++;
   extract_insn_cached (insn);
   if (which_alternative == -1
       && !constrain_operands (reload_completed))
     fatal_insn_not_found (insn);
-  if (lea && change_lea) NACL_LEA_MATCH_ADDRESS_OPERAND--;
 }
 
 /* Do cached constrain_operands and complain about failures.  */
@@ -2111,17 +2087,6 @@ extract_insn (rtx insn)
   which_alternative = -1;
 }
 
-enum attr_type
-get_attr_type (rtx insn ATTRIBUTE_UNUSED)
-{
-  enum attr_type result;
-  extern int NACL_LEA_MATCH_ADDRESS_OPERAND;
-  NACL_LEA_MATCH_ADDRESS_OPERAND++;
-  result = get_attr_type_real(insn);
-  NACL_LEA_MATCH_ADDRESS_OPERAND--;
-  return result;
-}
-
 /* After calling extract_insn, you can use this function to extract some
    information from the constraint strings into a more usable form.
    The collected data is stored in recog_op_alt.  */
@@ -3661,3 +3626,5 @@ struct rtl_opt_pass pass_split_for_shorten_branches =
   TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */
  }
 };
+
+
diff --git a/gcc/gcc/regrename.c b/gcc/gcc/regrename.c
index 0d92b1e..c678a09 100644
--- a/gcc/gcc/regrename.c
+++ b/gcc/gcc/regrename.c
@@ -25,7 +25,6 @@
 #include "rtl.h"
 #include "tm_p.h"
 #include "insn-config.h"
-#include "insn-attr.h"
 #include "regs.h"
 #include "addresses.h"
 #include "hard-reg-set.h"
@@ -771,12 +770,8 @@ build_def_use (basic_block bb)
 
 	  icode = recog_memoized (insn);
 	  extract_insn (insn);
-	  if (insn_is_nacl_lea(insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND++;
 	  if (! constrain_operands (1))
 	    fatal_insn_not_found (insn);
-	  if (insn_is_nacl_lea(insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND--;
 	  preprocess_constraints ();
 	  alt = which_alternative;
 	  n_ops = recog_data.n_operands;
@@ -1604,14 +1599,9 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)
 
       set = single_set (insn);
       extract_insn (insn);
-      
-      if (insn_is_nacl_lea(insn))
-        NACL_LEA_MATCH_ADDRESS_OPERAND++;
       if (! constrain_operands (1))
 	fatal_insn_not_found (insn);
       preprocess_constraints ();
-      if (insn_is_nacl_lea(insn))
-        NACL_LEA_MATCH_ADDRESS_OPERAND--;
       alt = which_alternative;
       n_ops = recog_data.n_operands;
       is_asm = asm_noperands (PATTERN (insn)) >= 0;
diff --git a/gcc/gcc/reload.c b/gcc/gcc/reload.c
index 82a9ac8..673dca9 100644
--- a/gcc/gcc/reload.c
+++ b/gcc/gcc/reload.c
@@ -863,11 +863,7 @@ can_reload_into (rtx in, int regno, enum machine_mode mode)
   if (recog_memoized (test_insn) >= 0)
     {
       extract_insn (test_insn);
-      if (insn_is_nacl_lea(test_insn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND++;
       r = constrain_operands (1);
-      if (insn_is_nacl_lea(test_insn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND--;
     }
   recog_data = save_recog_data;
   return r;
diff --git a/gcc/gcc/reload1.c b/gcc/gcc/reload1.c
index b40e0ea..fcf0bd3 100644
--- a/gcc/gcc/reload1.c
+++ b/gcc/gcc/reload1.c
@@ -4321,13 +4321,7 @@ reload_as_needed (int live_known)
 				 are met after the replacement.  */
 			      extract_insn (p);
 			      if (n)
-				{
-				  if (insn_is_nacl_lea(p))
-				    NACL_LEA_MATCH_ADDRESS_OPERAND++;
-				  n = constrain_operands (1);
-				  if (insn_is_nacl_lea(p))
-				    NACL_LEA_MATCH_ADDRESS_OPERAND--;
-				}
+				n = constrain_operands (1);
 			      else
 				break;
 
@@ -5219,11 +5213,7 @@ gen_reload_chain_without_interm_reg_p (int r1, int r2)
 	  /* We want constrain operands to treat this insn strictly in
 	     its validity determination, i.e., the way it would after
 	     reload has completed.  */
-	  if (insn_is_nacl_lea(insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND++;
 	  result = constrain_operands (1);
-	  if (insn_is_nacl_lea(insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND--;
 	}
       
       delete_insns_since (last);
@@ -6976,12 +6966,8 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,
 
 	  /* Verify that resulting insn is valid.  */
 	  extract_insn (temp);
-	  if (insn_is_nacl_lea(insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND++;
 	  if (constrain_operands (1))
 	    {
-	      if (insn_is_nacl_lea(insn))
-		NACL_LEA_MATCH_ADDRESS_OPERAND--;
 	      /* If the previous insn is an output reload, the source is
 		 a reload register, and its spill_reg_store entry will
 		 contain the previous destination.  This is now
@@ -7008,8 +6994,6 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,
 	    }
 	  else
 	    {
-	      if (insn_is_nacl_lea(insn))
-		NACL_LEA_MATCH_ADDRESS_OPERAND--;
 	      SET_DEST (PATTERN (temp)) = old;
 	    }
 	}
@@ -8125,16 +8109,8 @@ emit_insn_if_valid_for_reload (rtx insn)
       /* We want constrain operands to treat this insn strictly in its
 	 validity determination, i.e., the way it would after reload has
 	 completed.  */
-      if (insn_is_nacl_lea(insn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND++;
       if (constrain_operands (1))
-	{
-	  if (insn_is_nacl_lea(insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND--;
-	  return insn;
-	}
-      if (insn_is_nacl_lea(insn))
-	NACL_LEA_MATCH_ADDRESS_OPERAND--;
+	return insn;
     }
 
   delete_insns_since (last);
@@ -8772,12 +8748,8 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)
       if (code >= 0)
 	{
 	  extract_insn (add_insn);
-	  if (insn_is_nacl_lea(add_insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND++;
 	  if (constrain_operands (1))
 	    {
-	      if (insn_is_nacl_lea(add_insn))
-		NACL_LEA_MATCH_ADDRESS_OPERAND--;
 	      /* If this is a pre-increment and we have incremented the value
 		 where it lives, copy the incremented value to RELOADREG to
 		 be used as an address.  */
@@ -8787,8 +8759,6 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)
 
 	      return add_insn;
 	    }
-	  if (insn_is_nacl_lea(add_insn))
-	    NACL_LEA_MATCH_ADDRESS_OPERAND--;
 	}
       delete_insns_since (last);
     }
diff --git a/gcc/gcc/sel-sched.c b/gcc/gcc/sel-sched.c
index bbe7efc..a75ed04 100644
--- a/gcc/gcc/sel-sched.c
+++ b/gcc/gcc/sel-sched.c
@@ -1027,13 +1027,9 @@ get_reg_class (rtx insn)
   int alt, i, n_ops;
 
   extract_insn (insn);
-  if (insn_is_nacl_lea(insn))
-    NACL_LEA_MATCH_ADDRESS_OPERAND++;
   if (! constrain_operands (1))
     fatal_insn_not_found (insn);
   preprocess_constraints ();
-  if (insn_is_nacl_lea(insn))
-    NACL_LEA_MATCH_ADDRESS_OPERAND--;
   alt = which_alternative;
   n_ops = recog_data.n_operands;
 
-- 
1.7.1


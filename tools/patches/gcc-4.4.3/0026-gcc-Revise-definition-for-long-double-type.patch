From 8966f469d2d8ca2c2751af051afa49f3ed86201f Mon Sep 17 00:00:00 2001
From: Evgeny Eltsin <eaeltsin@google.com>
Date: Wed, 14 Jul 2010 19:16:56 +0400
Subject: [PATCH 26/27] [gcc] Revise definition for long double type.

Review URL: http://codereview.chromium.org/2928008
---
 gcc/gcc/config/i386/i386.h |   17 +----------------
 gcc/gcc/config/i386/nacl.h |    5 ++---
 gcc/gcc/machmode.h         |    4 ----
 3 files changed, 3 insertions(+), 23 deletions(-)

diff --git a/gcc/gcc/config/i386/i386.h b/gcc/gcc/config/i386/i386.h
index e6cdf1f..23c0d18 100644
--- a/gcc/gcc/config/i386/i386.h
+++ b/gcc/gcc/config/i386/i386.h
@@ -621,22 +621,7 @@ enum target_cpu_default
 #define LONG_TYPE_SIZE BITS_PER_WORD
 #define DOUBLE_TYPE_SIZE 64
 #define LONG_LONG_TYPE_SIZE 64
-#define LONG_DOUBLE_TYPE_SIZE (TARGET_80387 ? 80 : 64)
-
-/* With SSE2 but no 80387 we can not use 80bit long double but with 80387 we
-   must use 80bit long double in registers - hardware limitation in both cases */
-
-#undef GET_MODE_WIDER_MODE
-#define GET_MODE_WIDER_MODE(MODE) \
-	(TARGET_80387 ? mode_wider[MODE] : \
-	 ((MODE) != DFmode && (MODE) != XFmode && (MODE) != V4DFmode && \
-	  (MODE) != DCmode && (MODE) != XCmode) ? mode_wider[MODE] : \
-						  VOIDmode)
-#undef GET_MODE_2XWIDER_MODE
-#define GET_MODE_2XWIDER_MODE(MODE) \
-	(TARGET_80387 ? mode_2xwider[MODE] : \
-	 ((MODE) != DFmode && (MODE) != XFmode) ? mode_2xwider[MODE] : \
-						  VOIDmode)
+#define LONG_DOUBLE_TYPE_SIZE 80
 
 #define WIDEST_HARDWARE_FP_SIZE LONG_DOUBLE_TYPE_SIZE
 
diff --git a/gcc/gcc/config/i386/nacl.h b/gcc/gcc/config/i386/nacl.h
index 4b3d734..0c1387a 100644
--- a/gcc/gcc/config/i386/nacl.h
+++ b/gcc/gcc/config/i386/nacl.h
@@ -226,11 +226,10 @@ Boston, MA 02111-1307, USA.  */
 #define LONG_DOUBLE_TYPE_SIZE 64
 
 #undef TARGET_SUBTARGET_DEFAULT
-#define TARGET_SUBTARGET_DEFAULT	(MASK_IEEE_FP)
+#define TARGET_SUBTARGET_DEFAULT (MASK_IEEE_FP)
 
 #undef TARGET_SUBTARGET32_DEFAULT
-#define TARGET_SUBTARGET32_DEFAULT \
-	(MASK_80387 | MASK_FLOAT_RETURNS)
+#define TARGET_SUBTARGET32_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)
 
 #undef TARGET_SUBTARGET64_DEFAULT
 #define TARGET_SUBTARGET64_DEFAULT 0
diff --git a/gcc/gcc/machmode.h b/gcc/gcc/machmode.h
index c9022e7..7d50b46 100644
--- a/gcc/gcc/machmode.h
+++ b/gcc/gcc/machmode.h
@@ -219,14 +219,10 @@ extern const unsigned char mode_nunits[NUM_MACHINE_MODES];
 /* Get the next wider natural mode (eg, QI -> HI -> SI -> DI -> TI).  */
 
 extern const unsigned char mode_wider[NUM_MACHINE_MODES];
-#ifndef GET_MODE_WIDER_MODE
 #define GET_MODE_WIDER_MODE(MODE) mode_wider[MODE]
-#endif
 
 extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];
-#ifndef GET_MODE_2XWIDER_MODE
 #define GET_MODE_2XWIDER_MODE(MODE) mode_2xwider[MODE]
-#endif
 
 /* Return the mode for data of a given size SIZE and mode class CLASS.
    If LIMIT is nonzero, then don't use modes bigger than MAX_FIXED_MODE_SIZE.
-- 
1.7.1


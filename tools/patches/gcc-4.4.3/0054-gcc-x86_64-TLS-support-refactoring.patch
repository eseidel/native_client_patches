From 942f78b6d0bcd8b1ece94ffa3d72adf4ace3e73f Mon Sep 17 00:00:00 2001
From: Evgeny Eltsin <eaeltsin@google.com>
Date: Fri, 24 Sep 2010 17:58:59 +0400
Subject: [PATCH 54/54] [gcc] x86_64 TLS support refactoring

Enable all TLS access models.

Replace misleading non-standard __tls_get_addr with newly introduced __nacl_read_tp. Standard __tls_get_addr is now used for dynamic TLS access models, as intended.

BUG=
TEST=

Review URL: http://codereview.chromium.org/3453012
---
 gcc/gcc/config/i386/i386.c  |   44 ++++++++++++++++++++++++++++++++++--------
 gcc/gcc/config/i386/i386.md |   24 -----------------------
 gcc/gcc/varasm.c            |    3 --
 3 files changed, 35 insertions(+), 36 deletions(-)

diff --git a/gcc/gcc/config/i386/i386.c b/gcc/gcc/config/i386/i386.c
index d061298..82802ef 100644
--- a/gcc/gcc/config/i386/i386.c
+++ b/gcc/gcc/config/i386/i386.c
@@ -10113,6 +10113,31 @@ get_thread_pointer (int to_reg)
 {
   rtx tp, reg, insn;
 
+  if (TARGET_64BIT && TARGET_NACL)
+    {
+      rtx rax = gen_rtx_REG (Pmode, AX_REG);
+
+      insn = emit_call_insn (
+          gen_rtx_SET (
+              VOIDmode,
+              rax,
+              gen_rtx_CALL (
+                  VOIDmode,
+                  gen_rtx_MEM (
+                     QImode,
+                     gen_rtx_SYMBOL_REF (Pmode, "__nacl_read_tp")),
+                  const0_rtx)));
+      /* For ix86_cmodel == CM_LARGE_PIC we should add use of pic register
+         (see ix86_expand_call). However, NaCl can't use CM_LARGE* models  */
+      RTL_CONST_CALL_P (insn) = 1;
+
+      reg = gen_reg_rtx (Pmode);
+      insn = gen_rtx_SET (VOIDmode, reg, rax);
+      insn = emit_insn (insn);
+
+      return reg;
+    }
+
   tp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx), UNSPEC_TP);
   if (!to_reg)
     return tp;
@@ -10137,6 +10162,11 @@ legitimize_tls_address (rtx x, enum tls_model model, int for_mov)
   switch (model)
     {
     case TLS_MODEL_GLOBAL_DYNAMIC:
+      /* NaCl64: x may come in Pmode and in ptr_mode (if for_mov is true?).
+         Force Pmode for tls_global_dynamic_64 insn.  */
+      if (TARGET_64BIT && TARGET_NACL)
+        x = convert_memory_address (Pmode, x);
+
       dest = gen_reg_rtx (Pmode);
       tp = TARGET_GNU2_TLS ? get_thread_pointer (1) : 0;
 
@@ -10166,6 +10196,11 @@ legitimize_tls_address (rtx x, enum tls_model model, int for_mov)
       break;
 
     case TLS_MODEL_LOCAL_DYNAMIC:
+      /* NaCl64: x may come in Pmode and in ptr_mode (if for_mov is true?).
+         Force Pmode for tls_local_dynamic_base_64 insn.  */
+      if (TARGET_64BIT && TARGET_NACL)
+        x = convert_memory_address (Pmode, x);
+
       base = gen_reg_rtx (Pmode);
       tp = TARGET_GNU2_TLS ? get_thread_pointer (1) : 0;
 
@@ -10257,15 +10292,6 @@ legitimize_tls_address (rtx x, enum tls_model model, int for_mov)
       break;
 
     case TLS_MODEL_LOCAL_EXEC:
-      if (TARGET_64BIT && TARGET_NACL)
-	{
-	  rtx rax = gen_rtx_REG (Pmode, AX_REG);
-	  emit_insn (gen_naclcall_tls (rax, x));
-	  dest = gen_reg_rtx (Pmode);
-	  emit_move_insn (dest, rax);
-	  return dest;
-	}
-
       off = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, x),
 			    (TARGET_64BIT || TARGET_ANY_GNU_TLS)
 			    ? UNSPEC_NTPOFF : UNSPEC_TPOFF);
diff --git a/gcc/gcc/config/i386/i386.md b/gcc/gcc/config/i386/i386.md
index af717f4..8bced60 100644
--- a/gcc/gcc/config/i386/i386.md
+++ b/gcc/gcc/config/i386/i386.md
@@ -16436,30 +16436,6 @@
   operands[2] = ix86_tls_get_addr ();
 })
 
-(define_insn "*naclcall_tls"
-  [(set (match_operand 0 "register_operand" "=a")
-	(call (mem:QI (match_operand:DI 2 "call_insn_operand" ""))
-		 (match_operand 3 "" "")))
-   (unspec:SI [(match_operand:SI 1 "tls_symbolic_operand" "")]
-	      UNSPEC_TPOFF)]
-  "TARGET_64BIT"
-  { return "mov{q}\t{$%a1@TPOFF, %%rdi|rdi, %a1@TPOFF}\n\tcall\t%P2"; }
-  [(set_attr "type" "multi")])
-
-(define_expand "naclcall_tls"
-  [(parallel [(set (match_operand 0 "" "")
-		   (call (mem:QI (match_dup 2)) (const_int 0)))
-	      (unspec:SI [(match_operand:SI 1 "tls_symbolic_operand" "")]
-			 UNSPEC_TPOFF)])]
-  "TARGET_64BIT"
-{
-  rtx op = gen_lowpart (SImode, operands[1]);
-  SYMBOL_REF_FLAGS (op) = SYMBOL_REF_FLAGS (operands[1]);
-  operands[1] = op;
-  operands[2] = ix86_tls_get_addr ();
-}
-)
-
 (define_insn "*tls_local_dynamic_base_32_gnu"
   [(set (match_operand:SI 0 "register_operand" "=a")
 	(unspec:SI [(match_operand:SI 1 "register_operand" "b")
diff --git a/gcc/gcc/varasm.c b/gcc/gcc/varasm.c
index 751d674..9385b47 100644
--- a/gcc/gcc/varasm.c
+++ b/gcc/gcc/varasm.c
@@ -5695,9 +5695,6 @@ decl_default_tls_model (const_tree decl)
     kind = TLS_MODEL_GLOBAL_DYNAMIC;
   if (kind < flag_tls_default)
     kind = flag_tls_default;
-  if (TARGET_64BIT && TARGET_NACL)
-    /* NaCl currently supports a hybrid TLS model: __tls_get_addr(TPOFF) */
-    kind = TLS_MODEL_LOCAL_EXEC;
 
   return kind;
 }
-- 
1.7.1


From 9458de04bda2a89278d9f37fd4f58faea2468fe0 Mon Sep 17 00:00:00 2001
From: Evgeny Eltsin <eaeltsin@google.com>
Date: Wed, 30 Jun 2010 15:20:52 +0400
Subject: [PATCH 21/21] [gcc] Make nacl calls CALLs.

Change nacl calls from UNSPEC (fnaddr) to CALL (MEM (UNSPEC (fnaddr))).

In places where gcc processes CALLs, we copy-pasted the code for nacl calls implemented via UNSPEC_NACLCALL. Now we remove these changes.

Review URL: http://codereview.chromium.org/2852035
---
 gcc/gcc/config/i386/i386.c  |   18 +++++++++------
 gcc/gcc/config/i386/i386.md |   48 +++++++++++++++++++++---------------------
 gcc/gcc/dwarf2out.c         |   10 +--------
 gcc/gcc/final.c             |    3 +-
 gcc/gcc/reg-stack.c         |   21 ++----------------
 5 files changed, 40 insertions(+), 60 deletions(-)

diff --git a/gcc/gcc/config/i386/i386.c b/gcc/gcc/config/i386/i386.c
index d72ba33..235f2bf 100644
--- a/gcc/gcc/config/i386/i386.c
+++ b/gcc/gcc/config/i386/i386.c
@@ -19282,13 +19282,17 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,
       fnaddr = gen_rtx_MEM (QImode, fnaddr);
     }
 
-  if (!TARGET_NACL
-      || (GET_CODE (fnaddr) == MEM
-          && constant_call_address_operand (XEXP (fnaddr, 0), Pmode)))
-    call = gen_rtx_CALL (VOIDmode, fnaddr, callarg1);
-  else
-    call = gen_rtx_UNSPEC (VOIDmode, gen_rtvec (2, fnaddr, callarg1),
-                           UNSPEC_NACLCALL);
+  /* According to gcc internals manual, FNADDR should always be MEM.
+     At least the code above works only if FNADDR is something that has Pmode
+     expression as the first child.  */
+  if (TARGET_NACL && !constant_call_address_operand (XEXP (fnaddr, 0), Pmode))
+    {
+      fnaddr = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (fnaddr, 0)),
+                               UNSPEC_NACLCALL);
+      fnaddr = gen_rtx_MEM (QImode, fnaddr);
+    }
+    
+  call = gen_rtx_CALL (VOIDmode, fnaddr, callarg1);
   if (retval)
     call = gen_rtx_SET (VOIDmode, retval, call);
   if (pop)
diff --git a/gcc/gcc/config/i386/i386.md b/gcc/gcc/config/i386/i386.md
index 6ad93a9..de626c0 100644
--- a/gcc/gcc/config/i386/i386.md
+++ b/gcc/gcc/config/i386/i386.md
@@ -9806,8 +9806,8 @@
    (set_attr "mode" "SI")])
 
 (define_insn "naclcallsi"
-  [(unspec [(mem:QI (match_operand:SI 0 "register_operand" "r"))
-	          (match_operand 1 "" "")] UNSPEC_NACLCALL)]
+  [(call (mem:QI (unspec [(match_operand:SI 0 "register_operand" "r")] UNSPEC_NACLCALL))
+	 (match_operand 1 "" ""))]
   "!SIBLING_CALL_P (insn)"
 {
   gcc_assert (flag_control_integrity);
@@ -9823,8 +9823,8 @@
   [(set_attr "type" "call")])
 
 (define_insn "naclcalldi"
-  [(unspec [(mem:QI (match_operand:DI 0 "register_operand" "r"))
-	          (match_operand 1 "" "")] UNSPEC_NACLCALL)]
+  [(call (mem:QI (unspec [(match_operand:DI 0 "register_operand" "r")] UNSPEC_NACLCALL))
+	 (match_operand 1 "" ""))]
   "!SIBLING_CALL_P (insn) && TARGET_64BIT"
 {
   gcc_assert (flag_control_integrity);
@@ -9833,8 +9833,8 @@
   [(set_attr "type" "call")])
 
 (define_insn "naclsibcallsi"
-  [(unspec [(mem:QI (match_operand:SI 0 "sibcall_insn_operand" "s,U"))
-	          (match_operand 1 "" "")] UNSPEC_NACLCALL)]
+  [(call (mem:QI (unspec [(match_operand:SI 0 "sibcall_insn_operand" "s,U")] UNSPEC_NACLCALL))
+	 (match_operand 1 "" ""))]
   "SIBLING_CALL_P (insn)"
 {
   gcc_assert (flag_control_integrity);
@@ -9850,8 +9850,8 @@
   [(set_attr "type" "call")])
 
 (define_insn "naclsibcalldi"
-  [(unspec [(mem:QI (match_operand:DI 0 "sibcall_insn_operand" "s,U"))
-	          (match_operand 1 "" "")] UNSPEC_NACLCALL)]
+  [(call (mem:QI (unspec [(match_operand:DI 0 "sibcall_insn_operand" "s,U")] UNSPEC_NACLCALL))
+	 (match_operand 1 "" ""))]
   "SIBLING_CALL_P (insn) && TARGET_64BIT"
 {
   gcc_assert (flag_control_integrity);
@@ -9860,8 +9860,8 @@
   [(set_attr "type" "call")])
 
 (define_insn "naclcall_popsi"
-  [(unspec [(mem:QI (match_operand:SI 0 "register_operand" "r"))
-	          (match_operand:SI 1 "" "")] UNSPEC_NACLCALL)
+  [(call (mem:QI (unspec [(match_operand:SI 0 "register_operand" "r")] UNSPEC_NACLCALL))
+	 (match_operand:SI 1 "" ""))
    (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG)
 			    (match_operand:SI 2 "immediate_operand" "i")))]
   ""
@@ -9893,8 +9893,8 @@
   [(set_attr "type" "call")])
 
 (define_insn "naclcall_popdi"
-  [(unspec [(mem:QI (match_operand:DI 0 "register_operand" "r"))
-	          (match_operand:DI 1 "" "")] UNSPEC_NACLCALL)
+  [(call (mem:QI (unspec [(match_operand:DI 0 "register_operand" "r")] UNSPEC_NACLCALL))
+	 (match_operand:DI 1 "" ""))
    (set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG)
 			    (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_64BIT"
@@ -9913,8 +9913,8 @@
 
 (define_insn "naclcall_valuesi"
   [(set (match_operand 0 "" "")
-        (unspec [(mem:QI (match_operand:SI 1 "register_operand" "r"))
-	               (match_operand 2 "" "")] UNSPEC_NACLCALL))]
+	(call (mem:QI (unspec [(match_operand:SI 1 "register_operand" "r")] UNSPEC_NACLCALL))
+	      (match_operand 2 "" "")))]
   "!SIBLING_CALL_P (insn)"
 {
   gcc_assert (flag_control_integrity);
@@ -9931,8 +9931,8 @@
 
 (define_insn "naclcall_valuedi"
   [(set (match_operand 0 "" "")
-        (unspec [(mem:QI (match_operand:DI 1 "register_operand" "r"))
-	               (match_operand 2 "" "")] UNSPEC_NACLCALL))]
+	(call (mem:QI (unspec [(match_operand:DI 1 "register_operand" "r")] UNSPEC_NACLCALL))
+	      (match_operand 2 "" "")))]
   "!SIBLING_CALL_P (insn) && TARGET_64BIT"
 {
   gcc_assert (flag_control_integrity);
@@ -9942,8 +9942,8 @@
 
 (define_insn "naclsibcall_valuesi"
   [(set (match_operand 0 "" "")
-        (unspec [(mem:QI (match_operand:SI 1 "sibcall_insn_operand" "s,U"))
-	               (match_operand 2 "" "")] UNSPEC_NACLCALL))]
+	(call (mem:QI (unspec [(match_operand:SI 1 "sibcall_insn_operand" "s,U")] UNSPEC_NACLCALL))
+	      (match_operand 2 "" "")))]
   "SIBLING_CALL_P (insn) && !TARGET_64BIT"
 {
   gcc_assert (flag_control_integrity);
@@ -9960,8 +9960,8 @@
 
 (define_insn "naclsibcall_valuedi"
   [(set (match_operand 0 "" "")
-        (unspec [(mem:QI (match_operand:DI 1 "sibcall_insn_operand" "s,U"))
-	               (match_operand 2 "" "")] UNSPEC_NACLCALL))]
+	(call (mem:QI (unspec [(match_operand:DI 1 "sibcall_insn_operand" "s,U")] UNSPEC_NACLCALL))
+	      (match_operand 2 "" "")))]
   "SIBLING_CALL_P (insn) && TARGET_64BIT"
 {
   gcc_assert (flag_control_integrity);
@@ -9971,8 +9971,8 @@
 
 (define_insn "naclcall_value_popsi"
   [(set (match_operand 0 "" "")
-	      (unspec [(mem:QI (match_operand:SI 1 "register_operand" "r"))
-	               (match_operand:SI 2 "" "")] UNSPEC_NACLCALL))
+	(call (mem:QI (unspec [(match_operand:SI 1 "register_operand" "r")] UNSPEC_NACLCALL))
+	      (match_operand:SI 2 "" "")))
    (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG)
 			    (match_operand:SI 3 "immediate_operand" "i")))]
   ""
@@ -10005,8 +10005,8 @@
 
 (define_insn "naclcall_value_popdi"
   [(set (match_operand 0 "" "")
-	      (unspec [(mem:QI (match_operand:DI 1 "register_operand" "r"))
-	               (match_operand:DI 2 "" "")] UNSPEC_NACLCALL))
+	(call (mem:QI (unspec [(match_operand:DI 1 "register_operand" "r")] UNSPEC_NACLCALL))
+	      (match_operand:DI 2 "" "")))
    (set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG)
 			    (match_operand:SI 3 "immediate_operand" "i")))]
   "TARGET_64BIT"
diff --git a/gcc/gcc/dwarf2out.c b/gcc/gcc/dwarf2out.c
index ba9dade..7001ccb 100644
--- a/gcc/gcc/dwarf2out.c
+++ b/gcc/gcc/dwarf2out.c
@@ -1475,17 +1475,9 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)
 	    insn = XVECEXP (insn, 0, 0);
 	  if (GET_CODE (insn) == SET)
 	    insn = SET_SRC (insn);
-	  if (GET_CODE (insn) == CALL) {
+	  gcc_assert (GET_CODE (insn) == CALL);
 	  dwarf2out_args_size ("", INTVAL (XEXP (insn, 1)));
 	}
-	  else if ((GET_CODE (insn) == UNSPEC) &&
-		   (XINT (insn, 1) == UNSPEC_NACLCALL)) {
-	    dwarf2out_args_size ("", INTVAL (XVECEXP (insn, 0, 1)));
-	  }
-	  else {
-	    internal_error ("Not recognized as a call or naclcall");
-	  }
-	}
       return;
     }
 
diff --git a/gcc/gcc/final.c b/gcc/gcc/final.c
index 2afa475..1735a73 100644
--- a/gcc/gcc/final.c
+++ b/gcc/gcc/final.c
@@ -1755,8 +1755,7 @@ call_from_call_insn (rtx insn)
   gcc_assert (CALL_P (insn));
   x = PATTERN (insn);
 
-  while (GET_CODE (x) != CALL &&
-         !(GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_NACLCALL))
+  while (GET_CODE (x) != CALL)
     {
       switch (GET_CODE (x))
 	{
diff --git a/gcc/gcc/reg-stack.c b/gcc/gcc/reg-stack.c
index 31285b0..4300f35 100644
--- a/gcc/gcc/reg-stack.c
+++ b/gcc/gcc/reg-stack.c
@@ -1866,24 +1866,9 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)
 		compare_for_stack_reg (insn, regstack, pat_src);
 		break;
 
-              case UNSPEC_NACLCALL:
-	        {
-	          int count = hard_regno_nregs[REGNO (*dest)][GET_MODE (*dest)];
-	          while (--count >= 0)
-		    {
-		      regstack->reg[++regstack->top] = REGNO (*dest) + count;
-		      SET_HARD_REG_BIT (regstack->reg_set, 
-                                        REGNO (*dest) + count);
-		    }
-	        }
-	        replace_reg (dest, FIRST_STACK_REG);
-                break;
-
-              case UNSPEC_NACLJMP:
-                break;
-
-              case UNSPEC_NACLRET:
-                break;
+	      case UNSPEC_NACLJMP:
+	      case UNSPEC_NACLRET:
+		break;
 
 	      default:
 		gcc_unreachable ();
-- 
1.7.1


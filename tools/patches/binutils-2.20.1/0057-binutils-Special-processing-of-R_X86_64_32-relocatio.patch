From d0661795314a671fc154e6406c4ba31f03a376ab Mon Sep 17 00:00:00 2001
From: Evgeny Eltsin <eaeltsin@google.com>
Date: Tue, 2 Nov 2010 15:56:56 +0300
Subject: [PATCH 57/57] [binutils] Special processing of R_X86_64_32 relocations

R_X86_64_32 relocations in NaCl64 play the same role as R_X86_64_64 in native x86_64. They should be rewritten in case relocated symbol is hidden and will not exist in statically linked binary.

R_X86_64_64 are rewritten into R_X86_64_RELATIVE using the absolute value of the symbol. Unfortunately we don't have 32-bit alternative, thus we change relocation to use section instead of symbol. Usually this rewrite produces buggy relocations (why? there is corresponding comment in bfd, but it does not explain much), but in our special case we just create valid relocations.

BUG=http://code.google.com/p/nativeclient/issues/detail?id=1095
TEST=

Review URL: http://codereview.chromium.org/4128004
---
 binutils/bfd/elf64-x86-64.c |   12 ++++++++++--
 1 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/binutils/bfd/elf64-x86-64.c b/binutils/bfd/elf64-x86-64.c
index 5f57be0..b8527e1 100644
--- a/binutils/bfd/elf64-x86-64.c
+++ b/binutils/bfd/elf64-x86-64.c
@@ -3292,10 +3292,18 @@ elf64_x86_64_relocate_section (bfd *output_bfd, struct bfd_link_info *info,
 			  sindx = elf_section_data (osec)->dynindx;
 			  if (sindx == 0)
 			    {
-			      asection *oi = htab->elf.text_index_section;
-			      sindx = elf_section_data (oi)->dynindx;
+			      osec = htab->elf.text_index_section;
+			      sindx = elf_section_data (osec)->dynindx;
 			    }
 			  BFD_ASSERT (sindx != 0);
+#ifdef ELF64_NACL_C
+			  /* For NaCl, R_X86_64_32 comes in place of
+			     R_X86_64_64. We don't have R_X86_32_RELATIVE to
+			     make a rewrite similar to one above, so just make
+			     a non-buggy relocation against section symbol.  */
+			  if (r_type == R_X86_64_32)
+			    relocation -= osec->vma;
+#endif
 			}
 
 		      outrel.r_info = ELF64_R_INFO (sindx, r_type);
-- 
1.7.3.1


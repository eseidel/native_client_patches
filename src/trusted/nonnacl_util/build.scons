# -*- python -*-
# Copyright (c) 2008 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import platform
import sys
Import('env')

if env.Bit('linux'):
    env.Append(
        CPPDEFINES=['XP_UNIX'],
    )

if env.Bit('mac'):
    # there are some issue with compiling ".mm" files
    # TODO(sehr): this should Clone an env specifically for the mm file.
    env.FilterOut(CCFLAGS=['-pedantic'])
    env.Append(
        CPPDEFINES = [
            'XP_MACOSX',
            'XP_UNIX',
            ['TARGET_API_MAC_CARBON', '1'],
            'NO_X11',
            'USE_SYSTEM_CONSOLE',
        ],
    )

if env.Bit('windows'):
    env.Append(
        CCFLAGS = ['/EHsc'],
        CPPDEFINES = ['XP_WIN', 'WIN32', '_WINDOWS'],
    )

nonnacl_util_inputs = [
  'sel_ldr_launcher.cc',
  'sel_ldr_launcher_chrome.cc',
]

if env.Bit('windows'):
  nonnacl_util_inputs += [
      'win/sel_ldr_launcher_win.cc',
  ]
elif env.Bit('linux'):
  nonnacl_util_inputs += [
      'posix/sel_ldr_launcher_posix.cc',
      'posix/get_plugin_dirname.cc',
  ]
elif env.Bit('mac'):
  nonnacl_util_inputs += [
      'posix/sel_ldr_launcher_posix.cc',
      'osx/get_plugin_dirname.mm',
  ]

nonnacl_util_inputs = env.DualObject(nonnacl_util_inputs)

nonnacl_util_c_inputs = nonnacl_util_inputs + [ 'sel_ldr_launcher_c.cc' ]

env.DualLibrary('nonnacl_util', nonnacl_util_inputs)
env.DualLibrary('nonnacl_util_c', nonnacl_util_c_inputs)

# Testing:
#
# sel_ldr_launcher_test - builds the test binary and copies to staging/;
#                         the binary can be run directly, but the invoker
#                         is responsible for setting the environment to match
#                         the scons set-up below
# run_sel_ldr_launcher_test - builds the test binary and tests it within
#                             the scons-set environment

# Set up the build environment: gtest does not compile with our strict settings.
gtest_env = env.Clone()
gtest_env.FilterOut(CCFLAGS=['-pedantic'],
                    CXXFLAGS=['-fno-rtti', '-Weffc++'])
gtest_env.Prepend(CPPPATH=['${SOURCE_ROOT}/testing/gtest/include'])

# Set up dependencies and environment variables.
test_deps = [ 'gtest',
              'nonnacl_util',
              'nrd_xfer',
              'nacl_base',
              'platform',
              'google_nacl_imc_c',
              'gio',
              'nonnacl_srpc' ]
# TODO(polina): figure out why empty osenv causes
#   File "/usr/lib/python2.5/subprocess.py", line 1054, in _execute_child
#      executable = args[0]
#   IndexError: list index out of range
test_osenv="DUMMY=1"

if not env.Bit('windows'):
  # Add a dependency for #include <dlfcn.h>.
  test_deps += [ 'dl' ]

if env.Bit('mac'):
  # Add a dependency for objc symbols from osx/get_plugin_dirname.mm,
  # but don't do the bundling.
  gtest_env.Append(LINKFLAGS=['-framework', 'Foundation'])
  # Set $NACL_SEL_LDR to bypass the objc code that relies on bundling
  # to get the sel_ldr path.
  test_osenv = 'NACL_SEL_LDR=dummy_dir'

# Build the test binary and add it to the test suite.
test_binary = gtest_env.ComponentProgram('sel_ldr_launcher_test',
                                         'sel_ldr_launcher_test.cc',
                                         EXTRA_LIBS=test_deps)
test_node = gtest_env.CommandTest(name='sel_ldr_launcher_test.out',
                                  command=[ test_binary ],
                                  osenv=test_osenv)
env.AddNodeToTestSuite(test_node, ['small_tests'], 'run_sel_ldr_launcher_test')

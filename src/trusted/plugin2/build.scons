# Copyright (c) 2008 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

if not env.Bit('mac'):
  env['COMPONENT_STATIC'] = False


plugin_env = env.Clone()
if env.Bit('linux'):
    plugin_env.Append(
        CCFLAGS=['-fPIC', '-Wno-long-long',],
        CPPDEFINES = ['XP_UNIX', 'MOZ_X11'],
        # Catch unresolved symbols in libraries.
        LINKFLAGS=['-Wl,-z,defs'],
        )

    # We usually try to build things statically, but the plugin is a .so
    plugin_env.FilterOut(LINKFLAGS=['-static'])

if env.Bit('mac'):
    plugin_env.Append(
        CCFLAGS=['-Wno-long-long', '-Wno-unused-parameter'],
        CPPDEFINES = [
            'XP_MACOSX',
            'XP_UNIX',
            ['TARGET_API_MAC_CARBON', '1'],
            # TODO(robertm): NO_X11 may be obsolete
            'NO_X11',
            'USE_SYSTEM_CONSOLE',
        ],
        FRAMEWORKS = ['Carbon'],
        # TODO(jrg): it's a little awkward to, when you want a bundle:
        #  1) add -bundle to your LINKFLAGS
        #  2) create a "program" (which shows up in all_programs target)
        #  3) create a bundle out of it, specifying the bundle extension
        # Ideally that all happens inside a CompleteBundlePseudoBuilder().
        LINKFLAGS = ['-bundle', '-framework', 'Foundation']
    )

if env.Bit('windows'):
    plugin_env.Append(
        CCFLAGS = ['/EHsc',],
        CPPDEFINES = ['XP_WIN', 'WIN32', '_WINDOWS'],
    )
    plugin_env.Tool('atlmfc_vc80')

# Both the NPAPI and PPAPI plugins depend upon the code that is in the
# top (plugin) directory and on a large set of libraries.
common_inputs = [
    'ppapi_main.c',
    'sel_main_chrome.c',
]

# if env.Bit('target_x86'):
#   common_inputs += ['arch_x86/sandbox_isa.cc']
# elif env.Bit('target_arm'):
#   common_inputs += ['arch_arm/sandbox_isa.cc']
# else:
#   # Unrecognized architecture - this is a build failure.
#   print "Unrecognized architecture: %s" % env['TARGET_ARCHITECTURE']
#   Return()

common_objs = plugin_env.ComponentObject(common_inputs)

# The common libraries are those used by both the NPAPI and PPAPI plugins.
# They and the NPAPI/PPAPI specific libraries must come before OS libraries,
# because they may generate references that are resolved by the OS libraries.
# E.g., libplatform.a contains references to symbols from libcrypto.so.
common_libs = [
    'nonnacl_util',
    'nonnacl_srpc',
    'gio_wrapped_desc',
    'nrd_xfer',
    'nacl_base',
    'google_nacl_imc_c',
    'platform',
    'platform_qual_lib',
    'gio',
    'expiration',
    'sel',
    'ncvalidate',
    'debug_stub',
    'gdb_rsp',
]

os_libs = [ ]
if plugin_env.Bit('linux'):
  os_libs += ['dl', 'Xt', 'X11', 'crypto']

if plugin_env.Bit('windows'):
  os_libs += ['gdi32', 'user32', ]


###############################################################################
# PPAPI Plugin Build
###############################################################################

ppNaClPlugin = 'ppNaClPlugin2'

ppapi_env = plugin_env.Clone()

# Set #define for NACL_PPAPI. Force the source files to rebuild with it. Use an
# alternate prefix to avoid "two environments with different actions" error.
ppapi_env.Append(CPPDEFINES = ['NACL_PPAPI'])
ppapi_env.Replace(OBJPREFIX='ppapi_', SHOBJPREFIX='ppapi_');

ppapi_libs = common_libs
ppapi_env.Append(LIBS=ppapi_libs + os_libs)

if not env.Bit('mac'):  # linux, windows, arm
  # This builds with
  #   MODE=... ppNaClPlugin sel_ldr sdl=none
  # with the output going to
  #   scons-out/.../staging/libppNaClPlugin.so on Linux and
  #   scons-out/.../staging/ppNaClPlugin.dll on Windows.
  ppapi_plugin = ppapi_env.ComponentLibrary(ppNaClPlugin,
                                            common_inputs + ppapi_inputs,
                                            no_import_lib=True)
  # we need this to build the plugin, so register it here
  ppapi_env.AddPluginPrerequisite([ppapi_plugin])
else:  # mac
  # This builds with
  #   MODE=... scons-out/.../staging/ppNaClPlugin.bundle sel_ldr sdl=none.
  # This places both ppNaClPlugin.bundle/ and sel_ldr into staging/.
  # One must either set $NACL_SEL_LDR=path/to/sel_ldr or manually
  # copy sel_ldr to path/to/ppNaClPlugin.bundle/Contents/Resources/.
  # (the 2nd option has been disabled:
  # see ../nonnacl_util/osx/get_plugin_dirname.mm).
  ppapi_plugin = ppapi_env.ComponentProgram(ppNaClPlugin,
                                            common_inputs,
                                            no_import_lib=True)
  # Bundle pattern can be found in
  # site_scons/site_tools/target_platform_mac.py
  bundle_name = '${STAGING_DIR}/' + ppNaClPlugin + '.bundle'
  ppapi_env.Bundle(bundle_name,
                   BUNDLE_EXE = ppapi_plugin,
                   BUNDLE_PKGINFO_FILENAME = 0,
                   BUNDLE_RESOURCES = '',
                   BUNDLE_INFO_PLIST = 'osx_ppapi/Info.plist')
  # we need this to build the plugin, so register it here
  ppapi_env.AddPluginPrerequisite([bundle_name])


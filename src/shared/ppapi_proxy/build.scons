# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

Import('env')

# To get generated include files.
env.Append(CPPPATH=
          ['${SOURCE_ROOT}/native_client/src/shared/ppapi_proxy/trusted'])

if env.Bit('linux'):
    env.Append(
        CCFLAGS=['-fPIC', '-Wno-long-long',],
        # Catch unresolved symbols in libraries.
        LINKFLAGS=['-Wl,-z,defs'],
        )

if env.Bit('mac'):
    env.Append(
        CCFLAGS=['-Wno-long-long'],
        CPPDEFINES = [ ['TARGET_API_MAC_CARBON', '1'], 'USE_SYSTEM_CONSOLE', ],
        FRAMEWORKS = ['Carbon'],
    )

if env.Bit('windows'):
    env.Append(
        CCFLAGS = ['/EHsc',],
        CPPDEFINES = ['WIN32', '_WINDOWS'],
    )
    env.Tool('atlmfc_vc80')


# The PPAPI RPCs are specified abstractly via .srpc files.
# Once a .srpc file is added to the TrustedSrpc rules below, the low-level
# server/client proxies and stubs can be generated automatically using
#   scons --mode=opt-linux/mac/win srpcgen
#   scons --mode=dbg-linux/mac/win sprcgen
# The .cc files are written to ./ and .h files - to ./trusted/srpcgen/.
# The generated files must be committed when changes are made to .srpc files.

env.TrustedSrpc(is_client=True,
                srpc_files=['objectstub.srpc',
                            'completion_callback.srpc',
                            'ppp.srpc',
                            'ppp_instance.srpc',
                            ],
                name='PppRpcs',
                h_file='ppp_rpc.h',
                cc_file='ppp_rpc_client.cc',
                guard='GEN_PPAPI_PROXY_PPP_RPC_H_')

env.TrustedSrpc(is_client=False,
                srpc_files=['objectstub.srpc',
                            'ppb_core.srpc',
                            'ppb_graphics_2d.srpc',
                            'ppb_image_data.srpc',
                            ],
                name='PpbRpcs',
                h_file='ppb_rpc.h',
                cc_file='ppb_rpc_server.cc',
                guard='GEN_PPAPI_PROXY_PPB_RPC_H_')

env.TrustedSrpc(is_client=False,
                srpc_files=['upcall.srpc'],
                name='PpbUpcalls',
                h_file='upcall.h',
                cc_file='upcall_server.cc',
                guard='GEN_PPAPI_PROXY_UPCALL_H_')


common_obj = env.DualObject(['utility.cc'])

env.DualLibrary('ppapi_browser',
                ['browser_core.cc',
                 'browser_completion_callback_invoker.cc',
                 'browser_globals.cc',
                 'browser_graphics_2d.cc',
                 'browser_image_data.cc',
                 'browser_instance.cc',
                 'browser_ppp.cc',
                 'browser_upcall.cc',
                 'object.cc',
                 'object_proxy.cc',
                 'object_serialize.cc',
                 'objectstub_rpc_impl.cc',
                 'ppb_rpc_server.cc',
                 'ppp_rpc_client.cc',
                 'upcall_server.cc',
                 common_obj,])

# TODO(polina): this is only needed because fake_browser_ppapi
# borrows code from the plugin side proxy. Don't do that.
env.DualLibrary('ppapi_plugin',
                ['plugin_var.cc',
                 common_obj])


# Do a recursive diff of all files found in the first source directory against
# all the checked in versions of the files
node = env.CommandTest(
  'srpc_diff.out',
  command=['${PYTHON}', '${SOURCE_ROOT}/native_client/tools/diff.py', '-arv',
           '${TARGET_ROOT}/srpcgen/src',
           '${SOURCE_ROOT}/native_client/src'])

# Add a dependency on the 'srpcdif' alias for the previous command
env.Depends(node, Alias('srpcdif'))

# Create an alias for the command and add it to the standard small test.
# This test verifies that the checked in SRPC generated files are
# actually up to date.  We ignore ARM which generates false negatives.
# This is okay, since all try/builds should reproduce the same result
# this is a check on what is in source control, and generated files are
# platform independent.
if not env.Bit('target_arm'):
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_srpcgen_test')

# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')
import os

env.ComponentProgram('hello_world.nexe', 'hello_world.c')
node = env.CommandSelLdrTestNacl(
    'hello_world_test.out',
    command=[env.File('hello_world.nexe')],
    stdout_golden=env.File('hello_world.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_hello_world_test')


def CheckFileSize(target, source, env):
  expected_max = 10000
  actual_size = os.stat(source[0].abspath).st_size
  if actual_size > expected_max:
    raise Exception("File %s larger than expected: expected upto %i but got %i"
                    % (source[0].abspath, expected_max, actual_size))

if env.Bit('nacl_glibc'):
  # Check the (unstripped) executable size.  The main purpose of this
  # is to check that we have not acquired any 64k-page-size padding,
  # which would bump the size above 64k.
  node = env.Command('hello_world_size_check.out', env.File('hello_world.nexe'),
                     CheckFileSize)
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_hello_world_size_test')


env.ComponentProgram('at_exit.nexe', 'at_exit.c')
node = env.CommandSelLdrTestNacl(
    'at_exit_test.out',
    command=[env.File('at_exit.nexe')],
    stdout_golden=env.File('at_exit.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_at_exit_test')


env.ComponentProgram('exit.nexe', 'exit.c')
node = env.CommandSelLdrTestNacl(
    'exit_test.out',
    command=[env.File('exit.nexe')],
    exit_status='69',
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_exit_test')


env.ComponentProgram('printf.nexe', 'printf.c')
node = env.CommandSelLdrTestNacl(
    'printf_test.out',
    command=[env.File('printf.nexe'), '1000', '1', '0',],
    stdout_golden=env.File('printf.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_printf_test')


env.ComponentProgram('float.nexe', 'float.c')
node = env.CommandSelLdrTestNacl(
  'float_test.out',
  command=[env.File('float.nexe'),
           '1.0', '3.0', '0.5', '100.0', '0.3'],
  stdout_golden=env.File('float.stdout'),
  )
env.AddNodeToTestSuite(node, ['small_tests', 'sel_ldr_tests'], 'run_float_test')


# TODO(robertm): use a golden file
env.ComponentProgram('dump_env.nexe', 'dump_env.c')
node = env.CommandSelLdrTestNacl(
    'dump_env.out',
    command=[env.File('dump_env.nexe'),
             'arg1', 'arg2', 'arg3', 'arg4', 'arg5', 'argv6', 'argv7'],
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_dump_env_test')


env.ComponentProgram('misc_math.nexe', 'misc_math.c')
node = env.CommandSelLdrTestNacl(
     'misc_math_test.out',
    command=[env.File('misc_math.nexe')],
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_misc_math_test')


if env.Bit('bitcode'):
  env.Append(CPPDEFINES=['PNACL_ABI_TEST=1'])
else:
  env.Append(CCFLAGS=['-std=c99'])
env.ComponentProgram('abi.nexe', 'abi.c')
node = env.CommandSelLdrTestNacl(
    'abi_test.out',
    command=[env.File('abi.nexe')],
    )
env.AddNodeToTestSuite(node,  ['small_tests'], 'run_abi_test')

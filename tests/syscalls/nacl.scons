# -*- python -*-
# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



Import('env')

env.ComponentLibrary('syscall_test_framework', ['test.cc'])

env.ComponentProgram('syscalls.nexe',
                     'syscalls.cc',
                     EXTRA_LIBS=['pthread'])

if not env.Bit('host_windows'):
  # Creating a R/W test file in the output directory.
  # Because this test gets built on one platform and run on another (arm),
  # explaining to scons that this file is a dependency of the build and not
  # a test is tricky. As a simple work-around, the test inputs have been made
  # a 'default' scons target.
  # TODO(bradnelson): find a better way to make the plumbing on this work.
  inputs = env.Command(env.File('file_ok_rdwr.txt'), env.File('file_ok.txt'),
             [Copy(env.File('file_ok_rdwr.txt'), env.File('file_ok.txt')),
              Chmod(env.File('file_ok_rdwr.txt'), 0755)])
  Default(inputs)

  # syscalls_test exercise open/read/write, so need filesystem access
  # via the debug flag to sel_ldr
  node = env.CommandSelLdrTestNacl(
      'syscalls_test.out',
      command=[env.File('syscalls.nexe'), env.File('file_ok_rdwr.txt')],
      stdout_golden=env.File('syscalls.stdout'),
      filter_regex="'^(All tests PASSED)$|^(TEST.*)$'",
      sel_ldr_flags=['-a'],
                                   )
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_syscall_test')
#endif

env.ComponentProgram('getpid_test.nexe',
                     ['getpid_test.cc'],
                     EXTRA_LIBS=['syscall_test_framework'])
node = env.CommandSelLdrTestNacl(
    'getpid_test.out',
    command=[env.File('getpid_test.nexe')],
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_getpid_test')

raw_syscall_objects = env.RawSyscallObjects(['getpid_test.cc'])
env.ComponentProgram('raw_getpid_test.nexe',
                     raw_syscall_objects,
                     EXTRA_LIBS=['syscall_test_framework'])

node = env.CommandSelLdrTestNacl('raw_getpid_test.out',
                                  command=[env.File('raw_getpid_test.nexe')])
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_raw_getpid_test')

# The next few tests test the exit syscall.
# The first one checks for exit success.
env.ComponentProgram('exit_test.nexe', ['exit_test.cc'])
node = env.CommandSelLdrTestNacl(
    'exit_success_test.out',
    command=[env.File('exit_test.nexe')],
    exit_status='0',
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_exit_success_test')

# The next two test positive and negative return values.
node = env.CommandSelLdrTestNacl(
    'exit_one_test.out',
    command=[env.File('exit_test.nexe'), '1'],
    exit_status='1',
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_exit_one_test')

# The last one tests some unusually large number.
node = env.CommandSelLdrTestNacl(
    'exit_large_test.out',
    command=[env.File('exit_test.nexe'), '123'],
    exit_status='123',
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_exit_large_test')

# Test the semaphore system calls.
env.ComponentProgram('semaphore_tests.nexe',
                     ['semaphore_tests.cc'],
                     EXTRA_LIBS=['pthread', 'syscall_test_framework'])
node = env.CommandSelLdrTestNacl(
      'semaphore_tests.out',
      command=[env.File('semaphore_tests.nexe')],
      )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_semaphore_tests')

env.ComponentProgram('mem_test.nexe',
                     ['mem_test.cc'],
                     EXTRA_LIBS=['syscall_test_framework'])
node = env.CommandSelLdrTestNacl('mem_test.out',
                                 command=[env.File('mem_test.nexe')])
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_mem_test')

env.ComponentProgram('sysbrk_test.nexe',
                     ['sysbrk_test.cc'],
                     EXTRA_LIBS=['syscall_test_framework'])

node = env.CommandSelLdrTestNacl('sysbrk_test.out',
                                 command=[env.File('sysbrk_test.nexe')])
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_sysbrk_test')

# additions to add syscall tests 40-42
env.ComponentProgram('timefuncs_test.nexe',
                     ['timefuncs_test.cc'],
                     EXTRA_LIBS=['pthread', 'syscall_test_framework'])
node = env.CommandSelLdrTestNacl(
    'timefuncs_test.out',
    command=[env.File('timefuncs_test.nexe')]
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'], 'run_timefuncs_test')

raw_syscall_timefunc_objects = env.RawSyscallObjects(['timefuncs_test.cc'])
env.ComponentProgram('raw_timefuncs_test.nexe',
                     raw_syscall_timefunc_objects,
                     EXTRA_LIBS=['syscall_test_framework'])

node = env.CommandSelLdrTestNacl(
    'raw_timefuncs_test.out',
    command=[env.File('raw_timefuncs_test.nexe')]
    )
env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_raw_timefuncs_test')

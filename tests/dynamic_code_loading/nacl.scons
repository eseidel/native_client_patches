# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

# tests in this directory contain (inline) assembler
if env.Bit('bitcode'):
  Return()

# This leaves a gap between the code and data segments.
def GetLinkFlag(env):
  if env.Bit('nacl_glibc'):
    # When using dynamic linking, the dynamic linker is responsible
    # for reserving this space rather than the executable.
    return ''
  if env.Bit('target_arm'):
    # On ARM, we invoke the linker directly rather than via gcc.
    # TODO(mseaborn): Change driver script to accept -Wl args.
    return '--section-start=.rodata=0x1000000'
  else:
    return '-Wl,--section-start,.rodata=0x1000000'

# for building the tests
env.Append(LINKFLAGS=GetLinkFlag(env))

def GetTemplate(env):
  if env.Bit('target_arm'):
    return 'templates_arm.S'
  else:
    return 'templates_x86.S'

template_obj = env.ComponentObject(GetTemplate(env))

env.ComponentProgram('dynamic_load_test.nexe',
                     ['dynamic_load_test.c',
                      template_obj],
                     EXTRA_LIBS=['testrunner', 'srpc', 'pthread'])

# Uncomment once the toolchain gets the new syscalls:
#env.ComponentProgram('dynamic_modify_test.nexe',
#                     ['dynamic_modify_test.c',
#                      template_obj])

env.ComponentProgram('write_to_dyncode.nexe',
                     ['write_to_dyncode.c'])

env.ComponentProgram('dyncode_disabled_test.nexe',
                     ['dyncode_disabled_test.c'])

env.ComponentProgram('debug_mode_test.nexe',
                     ['debug_mode_test.c',
                      template_obj])

tests = [
    env.CommandSelLdrTestNacl(
        'dynamic_load_test.out',
        command=[env.File('dynamic_load_test.nexe')],
        # We need to set this because the test needs to behave
        # differently in the plugin, but the plugin does not provide a
        # way to distinguish itself.  TODO(mseaborn): Fix that.
        # See http://code.google.com/p/nativeclient/issues/detail?id=889
        osenv='NACL_SRPC_STANDALONE=1',
        ),
    env.CommandSelLdrTestNacl(
        'write_to_dyncode.out',
        command=[env.File('write_to_dyncode.nexe')],
        exit_status='untrusted_segfault',
        stdout_golden=env.File('write_to_dyncode.stdout'),
        ),
    env.CommandSelLdrTestNacl(
        'dyncode_disabled_test.out',
        command=[env.File('dyncode_disabled_test.nexe')],
        osenv='NACL_DISABLE_DYNAMIC_LOADING=1',
        ),
    env.CommandSelLdrTestNacl(
        'debug_mode_test.out',
        # NOTE: the data we are loading does not pass the validator
        sel_ldr_flags=["-c"],
        command=[env.File('debug_mode_test.nexe')],
        ),
# Uncomment once the toolchain gets the new syscalls:
#   env.CommandSelLdrTestNacl(
#       'dynamic_modify_test_disabled.out',
#       command=[env.File('dynamic_modify_test.nexe')],
#       ),
#   env.CommandSelLdrTestNacl(
#       'dynamic_modify_test_enabled.out',
#       command=[env.File('dynamic_modify_test.nexe')],
#       osenv='NACL_ALLOW_DYNCODE_REPLACEMENT=1',
#       ),
  ]

# TODO(kcc): non-standard linking options confuse Valgrind debug info reader.
if not env.IsRunningUnderValgrind():
  env.AddNodeToTestSuite(tests,
                         ['small_tests', 'sel_ldr_tests'],
                         'run_dynamic_load_test')

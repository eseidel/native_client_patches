# Copyright (c) 2008 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import platform

Import('env')


# In Chrome, we can share the nexe between the NPAPI (built-in) and
# PPAPI (loaded with --register-pepper-plugins) versions of NaCl, but the html
# needs to be different to specify different plugin content types:
# "application/x-nacl-srpc" for srpc nexes with NPAPI plugin and
# "application/x-ppapi-nacl-srpc" for for srpc nexes with PPAPI plugin.
# TODO(polina): at some point there should only be "application/x-nacl".


######################################################################
# Simple RPC basic methods tests
######################################################################
srpc_test_nexe = env.ComponentProgram('srpc_test.nexe', 'srpc_test.c',
                                      EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish('srpc_test.nexe', 'run',
            ['srpc_basic.html', 'srpc_perf.html', 'srpc_shm.html',
             'srpc_plugin.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.Publish('srpc_test.nexe', 'run',
            ['srpc_basic_ppapi.html', 'srpc_perf_ppapi.html',
             'srpc_shm_ppapi.html', 'srpc_plugin_ppapi.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])

env.AddPrebuiltBinaryToRepository(srpc_test_nexe)



srpc_shm_nexe = env.ComponentProgram('srpc_shm.nexe', 'srpc_shm.c',
                                     EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish('srpc_shm.nexe', 'run',
            [ 'srpc_shm.html',
              env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.Publish('srpc_shm.nexe', 'run',
            [ 'srpc_shm_ppapi.html',
              env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])

env.AddPrebuiltBinaryToRepository(srpc_shm_nexe)



srpc_nrd_server_nexe = env.ComponentProgram('srpc_nrd_server.nexe',
                                            'srpc_nrd_server.c',
                                            EXTRA_LIBS=['srpc', 'm',
                                                        'pthread'])
env.Publish('srpc_nrd_server.nexe', 'run',
            ['examples.html', '_README.txt', 'srpc_sockaddr.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.Publish('srpc_nrd_server.nexe', 'run',
            ['examples_ppapi.html', '_README.txt', 'srpc_sockaddr_ppapi.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])

env.AddPrebuiltBinaryToRepository(srpc_nrd_server_nexe)



srpc_nrd_client_nexe = env.ComponentProgram('srpc_nrd_client.nexe',
                                            'srpc_nrd_client.c',
                                            EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish('srpc_nrd_client.nexe', 'run',
            ['srpc_nrd_xfer.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.Publish('srpc_nrd_client.nexe', 'run',
            ['srpc_nrd_xfer_ppapi.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])

env.AddPrebuiltBinaryToRepository(srpc_nrd_client_nexe)


cat_nexe = env.ComponentProgram('cat.nexe', 'cat.c',
                                EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish('cat.nexe', 'run',
            ['srpc_url_as_nacl_desc.html',
             'srpc_url_as_nacl_desc_success.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.Publish('cat.nexe', 'run',
            ['srpc_url_as_nacl_desc_ppapi.html',
             'srpc_url_as_nacl_desc_success.html',
             env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])

env.ComponentProgram('srpc_bidir.nexe', 'srpc_bidir.c',
                     EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish('srpc_bidir.nexe', 'run', ['srpc_bidir.html'])


# NOTE: at least for ARM the EXTRA_LIBS list should include 'srpc'
#       but this somehow make the x86 version fragile
env.ComponentProgram('srpc_bad_service.nexe', 'srpc_bad_service.c',
                     EXTRA_LIBS=['m', 'pthread'])
env.Publish('srpc_bad_service.nexe', 'run', [])


# NOTE: sel_universal launches sel_ldr internally and we do not have a
# good hook to sneak in an emulator yet
TEST_SUITES = ['small_tests']
# TODO(robertm): research why srpc_basic and sysv_shm do not work on pnacl arm
# "execv failed, args were: ... execv: Exec format error Open failed"
if env.Bit('target_arm'):
  TEST_SUITES = ['small_tests_arm_hw_only']

node = env.CommandSelLdrTestNacl(
    'srpc_basic_test.out',
    loader='sel_universal',
    command=[env.File('srpc_test.nexe')],
    stdin=env.File('srpc_basic_test.stdin'),
    stdout_golden=env.File('srpc_basic_test.stdout'),
    )
env.AddNodeToTestSuite(node, TEST_SUITES, 'run_srpc_basic_test')

trusted_env = env.get('TRUSTED_ENV')
# TODO: add comment explaining the if
if trusted_env and trusted_env.Bit('linux'):
  node = env.CommandSelLdrTestNacl(
      'srpc_sysv_shm_test.out',
      loader='sel_universal',
      command=[env.File('srpc_shm.nexe')],
      stdin=env.File('srpc_sysv_shm_test.stdin'),
      stdout_golden=env.File('srpc_sysv_shm_test.stdout'),
      )
  env.AddNodeToTestSuite(node, TEST_SUITES, 'run_srpc_sysv_shm_test')

node = env.CommandSelLdrTestNacl(
    'srpc_bad_service.out',
    loader='sel_universal',
    command=[env.File('srpc_bad_service.nexe')],
    exit_status='1'
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_srpc_bad_service_test')

# Run the example tests under Selenium.
BROWSER_TESTS = ['browser_tests']
node = env.BrowserTester(
    'srpc_basic_browser_test.out',
     url='srpc_basic.html',
     files=[srpc_test_nexe,
            env.File('srpc_basic.html'),
            env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js'),
            ],
     browser='*firefox',
     )
env.AddNodeToTestSuite(node, BROWSER_TESTS, 'run_srpc_basic_browser_test')

node = env.BrowserTester(
    'srpc_plugin_browser_test.out',
     url='srpc_plugin.html',
     files=[srpc_test_nexe,
            srpc_nrd_client_nexe,
            env.File('srpc_plugin.html'),
            env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js'),
            ],
     browser='*firefox',
     )
env.AddNodeToTestSuite(node, BROWSER_TESTS, 'run_srpc_plugin_browser_test')

node = env.BrowserTester(
    'srpc_sockaddr_browser_test.out',
     url='srpc_sockaddr.html',
     files=[srpc_nrd_server_nexe,
            env.File('srpc_sockaddr.html'),
            env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js'),
            ],
     browser='*firefox',
     )
env.AddNodeToTestSuite(node, BROWSER_TESTS, 'run_srpc_sockaddr_browser_test')

node = env.BrowserTester(
    'srpc_shm_browser_test.out',
     url='srpc_shm.html',
     files=[srpc_shm_nexe,
            env.File('srpc_shm.html'),
            env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js'),
            ],
     browser='*firefox',
     )
env.AddNodeToTestSuite(node, BROWSER_TESTS, 'run_srpc_shm_browser_test')

# TODO: This test currently fails on lucid + firefox 3.6 for x86-32.
#     Disabling in that case. Renable when fixed.
#     See http://code.google.com/p/nativeclient/issues/detail?id=364
# NOTE:  This started failing on hardy as well for the new bots
# So this is now disabled for all platforms
if 0:
  node = env.BrowserTester(
      'srpc_nrd_xfer_browser_test.out',
       url='srpc_nrd_xfer.html',
       files=[srpc_nrd_client_nexe,
              srpc_nrd_server_nexe,
              env.File('srpc_nrd_xfer.html'),
              env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js'),
              ],
       browser='*firefox',
       )
  env.AddNodeToTestSuite(node, BROWSER_TESTS, 'run_srpc_nrd_xfer_browser_test')

node = env.BrowserTester(
    'srpc_url_as_nacl_desc_test.out',
     url='srpc_url_as_nacl_desc.html',
     files=[cat_nexe,
            env.File('srpc_url_as_nacl_desc.html'),
            env.File('srpc_url_as_nacl_desc_success.html'),
            env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js'),
            ],
     browser='*firefox',
     )
env.AddNodeToTestSuite(node, BROWSER_TESTS,
                       'run_srpc_url_as_nacl_desc_browser_test')

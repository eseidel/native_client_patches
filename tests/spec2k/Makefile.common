# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

######################################################################
# CONFIG
######################################################################

# NOTE: we assume you have a symlink "CLIENT" in this directory pointing
#       to your .../native_client directory
TC_ROOT=../../../toolchain

CFLAGS = $(CFLAGS_EXTRA)

######################################################################
.PHONY = clean

.SUFFIXES : .c .cc .o .bc

######################################################################
# Measurement tools

######################################################################
# Time command wrapper, and size measurement command
# Enable by invoking the makefile with:
#     measureit=1
# and PERF_LOGGER=<log_script_name>
######################################################################

ifeq ($(measureit),1)
# Dumps time taken to translate to a file: $exe.compile_time
TIME_CMD=/usr/bin/time -f "%U %S %e %C" -o $@.compile_time
# Calculate user+sys time for generating executable $(1) for benchmark $(2)
# Assumes the following format for name of $(1):  $(2)."setup_identifier"
# examples of "setup_identifier": nacl.opt.x8664, pnacl_translator.x8664, ...
# Assumes time is logged to a file with name $(1).compile_time
LOG_TRANSLATE_TIME=(TIME_FILE="$(1).compile_time" && \
	 FILE_TYPE=$(subst $(2).,,$(1)) && \
	 $(PERF_LOGGER) LogUserSysTime $$TIME_FILE "compiletime" $(2) $$FILE_TYPE)
else
TIME_CMD=
LOG_TRANSLATE_TIME=true
endif

ifeq ($(measureit),1)
# Check gzipped size of file $(1) for benchmark $(2)
# Assumes the following format for name of $(1):  $(2)."setup_identifier"
# examples of "setup_identifier": nacl.opt.x8664, opt.prelinked.bc, ...
LOG_ZIP_SIZE=(FILE_TYPE=$(subst $(2).,,$(1)) && \
	$(PERF_LOGGER) LogGzippedSize $(1) "transfersize" $(2) $$FILE_TYPE)
else
LOG_ZIP_SIZE=true
endif

######################################################################

clean:
	rm -f -- *.bc *.o *.s *.x86 *.arm  *.c~ .h~ \
              $(IT) $(IT).* *.out src/*bc $(EXTRA_CLEAN)


pnacl_bin: $(IT).pnacl.arm $(IT).pnacl.opt.arm \
           $(IT).pnacl.x8632 $(IT).pnacl.opt.x8632 \
	   $(IT).pnacl.x8664 $(IT).pnacl.opt.x8664

nacl_bin: $(IT).nacl.x8632 $(IT).nacl.opt.x8632 \
	  $(IT).nacl.x8664 $(IT).nacl.opt.x8664

nosfi_bin: $(IT).gcc.x8632 $(IT).gcc.opt.x8632 \
	   $(IT).gcc.arm $(IT).gcc.opt.arm

all: pnacl_bin nacl_bin nosfi_bin


######################################################################
## NON-SANDBOXING TOOLCHAINS
######################################################################
LOCAL_GCC=$(TIME_CMD) /usr/bin/gcc

# straight x86-32 gcc
$(IT).gcc.x8632: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O0 -m32 $(CFLAGS) $^ -static -lstdc++ -lm  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# optimized x86-32 gcc
$(IT).gcc.opt.x8632: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O3 -m32 $(CFLAGS) $^ -static -lstdc++ -lm  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))


# straight x86-64 gcc
$(IT).gcc.x8664: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O0 -m64 -DSPEC_CPU2000_LP64 $(CFLAGS) \
	 	$^ -static -lstdc++ -lm  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# optimized x86-64 gcc
$(IT).gcc.opt.x8664: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O3 -m64 -DSPEC_CPU2000_LP64 $(CFLAGS) \
	 	$^ -static -lstdc++ -lm  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))


######################################################################
LOCAL_CROSS_GCC=$(TIME_CMD) \
	$(TC_ROOT)/linux_arm-trusted/arm-2009q3/bin/arm-none-linux-gnueabi-gcc

# straight arm gcc (code sourcery)
$(IT).gcc.arm: $(SRC) $(CPPSRC)
	$(LOCAL_CROSS_GCC) -O0 -march=armv6 $(CFLAGS) \
		$^ -static -lstdc++ -lm  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# optimized x86 gcc (code sourcery)
$(IT).gcc.opt.arm: $(SRC) $(CPPSRC)
	$(LOCAL_CROSS_GCC) -O3 -march=armv6 $(CFLAGS) \
		$^ -static -lstdc++ -lm  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

######################################################################
## NACL-GCC TOOLCHAINS
######################################################################
NACL_GCC=$(TIME_CMD) $(TC_ROOT)/linux_x86/bin/nacl-gcc

# nacl x86 gcc
$(IT).nacl.x8632: $(SRC) $(CPPSRC)
	$(NACL_GCC) -O0 -m32 $(CFLAGS) $^ -static -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# nacl optimized x86 gcc
$(IT).nacl.opt.x8632: $(SRC) $(CPPSRC)
	$(NACL_GCC) -O3 -m32 $(CFLAGS) $^ -static -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# nacl x86 gcc, dynamic
$(IT).nacl.dyn.x8632: $(SRC) $(CPPSRC)
	$(NACL_GCC) -O0 -m32 $(CFLAGS) -fPIC -g $^ -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# nacl optimized x86 gcc, dynamic
$(IT).nacl.dyn.opt.x8632: $(SRC) $(CPPSRC)
	$(NACL_GCC) -O3 -m32 $(CFLAGS) -fPIC -g $^ -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

######################################################################
NACL64_GCC=$(TIME_CMD) $(TC_ROOT)/linux_x86/bin/nacl64-gcc

# nacl x86-64 gcc
$(IT).nacl.x8664: $(SRC) $(CPPSRC)
	$(NACL64_GCC) -O0 $(CFLAGS) $^  -static -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# nacl optimized x86-64 gcc
$(IT).nacl.opt.x8664: $(SRC) $(CPPSRC)
	$(NACL64_GCC) -O3 $(CFLAGS) $^  -static -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# nacl x86-64 gcc, dynamic
$(IT).nacl.dyn.x8664: $(SRC) $(CPPSRC)
	$(NACL64_GCC) -O0 $(CFLAGS) -fPIC -g $^ -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# nacl optimized x86-64 gcc, dynamic
$(IT).nacl.dyn.opt.x8664: $(SRC) $(CPPSRC)
	$(NACL64_GCC) -O3 $(CFLAGS) -fPIC -g $^ -lstdc++ -lm  -lnosys -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

######################################################################
## BITCODE TOOLCHAINS
######################################################################
# BITCODE - FRONTEND

PNACL_ROOT=$(TC_ROOT)/linux_arm-untrusted
PNACL_BIN=$(PNACL_ROOT)/bin
TRANSLATOR_X8632=$(PNACL_BIN)/pnacl-translate --pnacl-sb-x86-32 -arch x86-32
TRANSLATOR_X8664=$(PNACL_BIN)/pnacl-translate --pnacl-sb-x86-64 -arch x86-64
BC_GCC=$(PNACL_BIN)/pnacl-gcc -emit-llvm
BC_GPP=$(PNACL_BIN)/pnacl-g++ -emit-llvm
BC_OPT=$(PNACL_BIN)/pnacl-bcopt -O3
BC_LINK=$(PNACL_BIN)/pnacl-bclink
BC_TRANSLATE=$(TIME_CMD) $(PNACL_BIN)/pnacl-bcld

PNACL_FLAGS=--pnacl-driver-verbose

# -fno-fast-math may become necessary once we switch to more recent version
# of llvm, c.f.: http://code.google.com/p/nativeclient/issues/detail?id=821
PNACL_FLAGS_COMMON=$(PNACL_FLAGS) $(CFLAGS) -D__native_client__=1

%.bc: %.c
	$(BC_GCC) $(PNACL_FLAGS_COMMON) $< -c -o $@
%.bc: %.cc
	$(BC_GPP) $(PNACL_FLAGS_COMMON) $< -c -o $@

%.o.bc: %.c
	$(BC_GCC) $(PNACL_FLAGS_COMMON) -O3 $< -c -o $@
%.o.bc: %.cc
	$(BC_GPP) $(PNACL_FLAGS_COMMON) -O3 $< -c -o $@

# llvm bit code combined
$(IT).bc: $(SRC:%.c=%.bc) $(CPPSRC:%.cc=%.bc)
	$(BC_LINK) $^  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# optimized llvm bit code combined
$(IT).preopt.bc: $(SRC:%.c=%.o.bc) $(CPPSRC:%.cc=%.o.bc)
	$(BC_LINK) $^  -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# optimized llvm bit code combined and interprocedurally re-optimized
$(IT).opt.bc: $(IT).preopt.bc
	$(BC_OPT) $< -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

######################################################################
# BITCODE - BACKEND - ARM

$(IT).pnacl.arm: $(IT).bc
	$(BC_TRANSLATE) $(IT).bc  -arch arm $(PNACL_FLAGS) -o $@ -lm
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

$(IT).pnacl.opt.arm: $(IT).opt.bc
	$(BC_TRANSLATE) $(IT).opt.bc -arch arm $(PNACL_FLAGS) -o $@ -lm
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

######################################################################
# BITCODE - BACKEND - X8632

$(IT).pnacl.x8632: $(IT).bc
	$(BC_TRANSLATE) $(IT).bc -arch x86-32 $(PNACL_FLAGS) -o $@ -lm
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

$(IT).pnacl.opt.x8632: $(IT).opt.bc
	$(BC_TRANSLATE) $(IT).opt.bc -arch x86-32 $(PNACL_FLAGS) -o $@ -lm
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))


######################################################################
# BITCODE - BACKEND - X8664

$(IT).pnacl.x8664: $(IT).bc
	$(BC_TRANSLATE) $(IT).bc -arch x86-64 $(PNACL_FLAGS) -o $@ -lm
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

$(IT).pnacl.opt.x8664: $(IT).opt.bc
	$(BC_TRANSLATE) $(IT).opt.bc -arch x86-64 $(PNACL_FLAGS) -o $@ -lm
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

######################################################################
# SANDBOXED TRANSLATOR
# In order to use these the following setup is necessary:
# tools/llvm/utman.sh build-sandboxed-translators
# tools/llvm/utman.sh install-translators
######################################################################
BC_PRELINK=$(PNACL_BIN)/pnacl-bcld -emit-llvm

# optimized llvm bit code combined and interprocedurally optimized
$(IT).opt.prelinked.bc: $(IT).opt.bc
	$(BC_PRELINK) $^ -lm -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))

# llvm bit code combined
$(IT).prelinked.bc: $(IT).bc
	$(BC_PRELINK) $^ -lm -o $@
	@$(call LOG_ZIP_SIZE,$@,$(IT))


# TODO(abetul): the arm translator is not fully supported at this time
#
#BC_ARM_TRANSLATOR=$(TIME_CMD) ${TRANSLATOR_ROOT}/arm/translator
#
#$(IT).pnacl_translator.arm: $(IT).prelinked.bc
#	$(BC_ARM_TRANSLATOR) $(IT).prelinked.bc $@
#
#$(IT).pnacl_translator.opt.arm: $(IT).opt.prelinked.bc
#	$(BC_ARM_TRANSLATOR) $(IT).opt.prelinked.bc $@

BC_X8632_TRANSLATOR=$(TIME_CMD) ${TRANSLATOR_X8632}

$(IT).pnacl_translator.x8632: $(IT).prelinked.bc
	$(BC_X8632_TRANSLATOR) $(PNACL_FLAGS) $(IT).prelinked.bc -o $@
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

$(IT).pnacl_translator.opt.x8632: $(IT).opt.prelinked.bc
	$(BC_X8632_TRANSLATOR) $(PNACL_FLAGS) $(IT).opt.prelinked.bc -o $@
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))


BC_X8664_TRANSLATOR=$(TIME_CMD) ${TRANSLATOR_X8664}

$(IT).pnacl_translator.x8664: $(IT).prelinked.bc
	$(BC_X8664_TRANSLATOR) $(PNACL_FLAGS) $(IT).prelinked.bc -o $@
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

$(IT).pnacl_translator.opt.x8664: $(IT).opt.prelinked.bc
	$(BC_X8664_TRANSLATOR) $(PNACL_FLAGS) $(IT).opt.prelinked.bc -o $@
	@$(call LOG_TRANSLATE_TIME,$@,$(IT))

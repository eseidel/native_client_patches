diff -NaurbB src/gap.c src.patched/gap.c
--- src/gap.c	1999-02-18 06:38:43.000000000 -0500
+++ src.patched/gap.c	2010-06-16 14:46:20.000000000 -0400
@@ -98,7 +98,9 @@
 *H
 */
 
+#if 0 /* @LOCALMOD */
 #include        <setjmp.h>              /* definition of setjmp buffer     */
+#endif 0 /* @LOCALMOD */
 
 #include        "system.h"              /* system dependent functions      */
 #include        "gasman.h"              /* dynamic storage manager         */
@@ -126,7 +127,7 @@
 **  read-eval-print loop.  If you 'quit;' a break  loop  control  returns  to
 **  that place.
 */
-jmp_buf         ErrRet;
+/* jmp_buf         ErrRet; */ /* @LOCALMOD */
 
 
 /****************************************************************************
@@ -179,7 +180,7 @@
     InitGap( argc, argv );
 
     /* set the environment to return in case of an error                   */
-    setjmp( ErrRet );
+    /* setjmp( ErrRet ); */ /* @LOCALMOD */
 
     /* repeat the read-eval-print cycle until end of input                 */
     while ( Symbol != S_EOF ) {
@@ -469,7 +470,7 @@
     /* close "*errout*" and return to the main read-eval-print loop        */
     while ( CloseOutput() ) ;
     while ( CloseInput() ) ;
-    longjmp( ErrRet, 1 );
+    /* longjmp( ErrRet, 1 ); */ /* @LOCALMOD */
     return 0;                           /* just to please lint ...         */
 }
 
@@ -1760,7 +1761,7 @@
     InstIntFunc( "CoefficientsInt", FunCoefficients );
 
     /* read all init files, stop doing so after quiting from Error         */
-    if ( ! setjmp( ErrRet ) ) {
+    if ( 1 /* ! setjmp( ErrRet ) */ ) { /* @LOCALMOD */ 
         for ( i=0; i<sizeof(SyInitfiles)/sizeof(SyInitfiles[0]); ++i ) {
             if ( SyInitfiles[i][0] != '\0' ) {
                 if ( OpenInput( SyInitfiles[i] ) ) {
diff -NaurbB src/system.c src.patched/system.c
--- src/system.c	2001-04-24 23:41:02.000000000 -0400
+++ src.patched/system.c	2010-06-16 14:29:21.000000000 -0400
@@ -1572,6 +1572,9 @@
 */
 #if SYS_USG
 
+/* @LOCALMOD-START */
+#if 0
+
 #ifndef SYS_TERMIO_H                    /* terminal control functions      */
 # include       <termio.h>
 # define SYS_TERMIO_H
@@ -1603,6 +1606,10 @@
 extern  int             write P(( int, char *, int ));
 #endif
 
+/* @LOCALMOD-END */
+#endif 
+
+
 #ifdef SIGTSTP
 
 long            syFid;
@@ -1611,8 +1618,11 @@
     int                 signr;
 {
     syStartraw( syFid );
+/* @LOCALMOD-START */
+#if 0
     signal( SIGCONT, SIG_DFL );
     kill( getpid(), SIGCONT );
+#endif
 #ifdef SYS_HAS_SIG_T
     return 0;                           /* is ignored                      */
 #endif
@@ -1622,8 +1632,11 @@
     int                 signr;
 {
     syStopraw( syFid );
+/* @LOCALMOD-START */
+#if 0
     signal( SIGCONT, syAnswerCont );
     kill( getpid(), SIGTSTP );
+#endif
 #ifdef SYS_HAS_SIG_T
     return 0;                           /* is ignored                      */
 #endif
@@ -1634,6 +1647,10 @@
 int             syStartraw ( fid )
     long                fid;
 {
+  /* @LOCALMOD */
+  return 0;
+#if 0
+
     /* if running under a window handler, tell it that we want to read     */
     if ( syWindow ) {
         if      ( fid == 0 ) { syWinPut( fid, "@i", "" );  return 1; }
@@ -1666,6 +1683,9 @@
 
     /* indicate success                                                    */
     return 1;
+  /* @LOCALMOD */
+#endif
+    
 }
 
 void            syStopraw ( fid )
@@ -1674,7 +1694,8 @@
     /* if running under a window handler, don't do nothing                 */
     if ( syWindow )
         return;
-
+ /* @LOCALMOD */
+#if 0
 #ifdef SIGTSTP
     /* remove signal handler for stop                                      */
     signal( SIGTSTP, SIG_DFL );
@@ -1683,6 +1704,8 @@
     /* enable input buffering, line editing and echo again                 */
     if ( ioctl( fileno(syBuf[fid].fp), TCSETAW, &syOld ) == -1 )
         fputs("gap: 'ioctl' could not turn off raw mode!\n",stderr);
+ /* @LOCALMOD */
+#endif
 }
 
 int             syGetch ( fid )
@@ -3434,6 +3457,9 @@
 
 unsigned long   SyTime ()
 {
+  /* @LOCALMOD */
+  return 1000;
+#if 0
     struct tms          tbuf;
 
     if ( times( &tbuf ) == -1 ) {
@@ -3441,6 +3467,7 @@
         SyExit( 1 );
     }
     return 100 * tbuf.tms_utime / (HZ / 10) - syStartTime;
+#endif
 }
 
 #endif
